【http://redisdoc.com/】redis 命令参考文档

1.从GitHub上下载windows客户端
	https://github.com/MSOpenTech/redis/releases
	
	cmd切换至redis目录下，运行
		redis-server.exe redis-windos.conf
	服务已经启动了

2.打开另一个cmd,切换至redis目录下，运行
	redis-cli.exe -h <host> -p <port>

	例：
		连接redis
		redis-cli.exe -h 127.0.0.1 -p 6379



	存值：
		set  <key> <value>
	取值：
		get  <key> <value>

3.Redis配置
	Redis CONFIG命令：


		##查看配置
			config  get <config_setting_name>
		
		例：
			config get loglevel
			config get *
		##编辑配置：
			config set <config_setting_name> <new_config_value>
		例：
			config set loglevel "notice"


		##redis.conf配置说明：
			1. Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程

			    daemonize no

			2. 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定

			    pidfile /var/run/redis.pid

			3. 指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字

			    port 6379

			4. 绑定的主机地址

			    bind 127.0.0.1

			5.当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能

			    timeout 300

			6. 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose

			    loglevel verbose

			7. 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发送给/dev/null

			    logfile stdout

			8. 设置数据库的数量，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id

			    databases 16

			9. 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合

			    save <seconds> <changes>

			    Redis默认配置文件中提供了三个条件：

			    save 900 1

			    save 300 10

			    save 60 10000

			    分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。

			 

			10. 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大

			    rdbcompression yes

			11. 指定本地数据库文件名，默认值为dump.rdb

			    dbfilename dump.rdb

			12. 指定本地数据库存放目录

			    dir ./

			13. 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步

			    slaveof <masterip> <masterport>

			14. 当master服务设置了密码保护时，slav服务连接master的密码

			    masterauth <master-password>

			15. 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH <password>命令提供密码，默认关闭

			    requirepass foobared

			16. 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息

			    maxclients 128

			17. 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区

			    maxmemory <bytes>

			18. 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no

			    appendonly no

			19. 指定更新日志文件名，默认为appendonly.aof

			     appendfilename appendonly.aof

			20. 指定更新日志条件，共有3个可选值： 
			    no：表示等操作系统进行数据缓存同步到磁盘（快） 
			    always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全） 
			    everysec：表示每秒同步一次（折衷，默认值）

			    appendfsync everysec

			 

			21. 指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）

			     vm-enabled no

			22. 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享

			     vm-swap-file /tmp/redis.swap

			23. 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0

			     vm-max-memory 0

			24. Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值

			     vm-page-size 32

			25. 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。

			     vm-pages 134217728

			26. 设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4

			     vm-max-threads 4

			27. 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启

			    glueoutputbuf yes

			28. 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法

			    hash-max-zipmap-entries 64

			    hash-max-zipmap-value 512

			29. 指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）

			    activerehashing yes

			30. 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件

			    include /path/to/local.conf



4.Redis数据类型：
	string、hash、list、set、zset(sorted set:有序集合)、

	string:是最基本的数据类型，string类型是二进制安全的，
		即可以包含任何数据（图片等等），一个键最大能存储512MB
		
		例：
			set name "yanyi"
			get name

	hash:是一个键值对集合，特别适合存储对象
		
		例：
			hmset dog name "Bob"
			hmset dog gender "Man"
			hmset dog age "18" color "orange"

	list:是简单的字符串列表，按照插入顺序排序，
		可以添加一个元素到元素的头部或是尾部
		
		例：
			lpush namelist yanyi 
			lpush namelist xiaoming
			lpush namelist xiaohong

			lrange namelist 0 10

		(列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储40多亿)。)

	set:是string类型的无序集合。集合通过哈希表实现，所以添加、
		删除、查找的复杂度都是O(1)
		
		例：
			sadd demoset yanyi
			sadd demoset xiaoming
			sadd demoset xiaohong

			smembers demoset
		
		 sadd命令添加一个string元素到key对应的set集合中，成功返回1，
			如果元素已经存在返回0,key对应的set不存在返回错误
				
	zset:和set一样也是string类型元素的集合，且不允许重复的成员
		不同的是每个元素都会关联一个double类型的分数
		（redis通过分数为集合中的成员进行从小到大排序）
		zset的成员是唯一的，但分数却可以重复

			zadd key score member
		例：
			zadd demozset 0 yanyi
			zadd demozset 0  xiaohong
			zadd demozset 1 xiaoha
			zadd demozset 3 hhh
			zrangebyscore  demozset 0 10


5.Redis命令：
	redis-cli   连接本地redis服务器

	redis-cli -h <host> -p <port> -a <password>
		连接远程redis服务

		例：redis-cli -h 127.0.0.1 -p 6379 -a "mypass"


6.Redis键：
	语法：
		command key_name





《Redis命令》：
	
	keys * 查看所有key
	type key 查看key类型
	exists key  查看key是否存在
	del key 删除key(key需存在)
	dump key 序列化key,并返回序列化的值
	expire key seconds
	expire key milliseconds 
			为key设置过期时间
	expireat key timestamp
	pexpireat key milliseconds-timestamp 
			为key设置过期时间
	persist key 移除key的过期时间
	
	pttl key 查看key剩余过期时间（单位毫秒），
			当key不存在时，返回-2，
			当key存在但没设置过期时间时，返回-1
	ttl key  查看key剩余过期时间（单位秒）
	keys pattern 查找所有符合给定模式的key
	move key db 将当前数据库的key移动到指定的数据库中
	randomkey 从当前数据库中随机返回一个key
	rename key newkey 修改key名称（newkey已存在则会覆盖）
	renamenx key newkey 仅当newkey不存在时，将key改为newkey(防重复)

《Redis 字符串命令》：
	set key value 设置指定key的值
	get key 获取指定key的值
	getrange key start end 返回key中字符串值的子字符
	getset key value 将指定key值设为value，并返回key的旧值
	getbit key offset 对key所存储的字符串值，获取指定偏移量上的位(bit)
	mget key1[key2..] 获取所有（一个或多个）key的值
	setex key seconds value 指定key的值，并给key设置过期时间
	setnx key value 当key不存在时设置key的值（防重复）
	strlen key 返回key所存储的字符串值的长度
			MSET key value [key value ...]
			同时设置一个或多个 key-value 对。
		13	MSETNX key value [key value ...] 
			同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。
		14	PSETEX key milliseconds value
			这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。
		15	INCR key
			将 key 中储存的数字值增一。
		16	INCRBY key increment
			将 key 所储存的值加上给定的增量值（increment） 。
		17	INCRBYFLOAT key increment
			将 key 所储存的值加上给定的浮点增量值（increment） 。
		18	DECR key
			将 key 中储存的数字值减一。
		19	DECRBY key decrement
			key 所储存的值减去给定的减量值（decrement） 。
		20	APPEND key value




《Redis Hash命令》：
	hkeys key  获取所有hash表中的字段
	hgetall key  获取在哈希表中指定key的所有字段和值
	hlen key 获取hash表中字段的数量
	hdel key field1 [filed2]   删除一个或多个hash表字段
	hexists key field 查看hash表key中，是否存在字段filed
	hget key field 获取指定key filed值
	hmset key field value 设定指定key的字段的值
	hincrby key field increment 为哈希表key中的指定字段
		的整数值加上增量increment
	hincrbyfloat key field increment 为哈希表key中的指定字段
		的浮点数值加上增量increment
			HMGET key field1 [field2] 
		获取所有给定字段的值
			HMSET key field1 value1 [field2 value2 ] 
		同时将多个 field-value (域-值)对设置到哈希表 key 中。
			HSET key field value 
		将哈希表 key 中的字段 field 的值设为 value 。
			HSETNX key field value 
		只有在字段 field 不存在时，设置哈希表字段的值。
			HVALS key 
		获取哈希表中所有值
			HSCAN key cursor [MATCH pattern] [COUNT count] 
		迭代哈希表中的键值对

《Redis list命令》：
	lpush key value [value]  插入值至指定key

	1	BLPOP key1 [key2 ] timeout 
	移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。
	2	BRPOP key1 [key2 ] timeout 
	移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。
	3	BRPOPLPUSH source destination timeout 
	从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。
	4	LINDEX key index 
	通过索引获取列表中的元素
	5	LINSERT key BEFORE|AFTER pivot value 
	在列表的元素前或者后插入元素
	6	LLEN key 
	获取列表长度
	7	LPOP key 
	移出并获取列表的第一个元素
	8	LPUSH key value1 [value2] 
	将一个或多个值插入到列表头部
	9	LPUSHX key value 
	将一个值插入到已存在的列表头部
	10	LRANGE key start stop 
	获取列表指定范围内的元素
	11	LREM key count value 
	移除列表元素
	12	LSET key index value 
	通过索引设置列表元素的值
	13	LTRIM key start stop 
	对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。
	14	RPOP key 
	移除并获取列表最后一个元素
	15	RPOPLPUSH source destination 
	移除列表的最后一个元素，并将该元素添加到另一个列表并返回
	16	RPUSH key value1 [value2] 
	在列表中添加一个或多个值
	17	RPUSHX key value 
	为已存在的列表添加值

《Redis set命令》：
	1	sadd key member1 [member2] 
	向集合添加一个或多个成员
	2	SCARD key 
	获取集合的成员数
	3	SDIFF key1 [key2] 
	返回给定所有集合的差集
	4	SDIFFSTORE destination key1 [key2] 
	返回给定所有集合的差集并存储在 destination 中
	5	SINTER key1 [key2] 
	返回给定所有集合的交集
	6	SINTERSTORE destination key1 [key2] 
	返回给定所有集合的交集并存储在 destination 中
	7	SISMEMBER key member 
	判断 member 元素是否是集合 key 的成员
	8	SMEMBERS key 
	返回集合中的所有成员
	9	SMOVE source destination member 
	将 member 元素从 source 集合移动到 destination 集合
	10	SPOP key 
	移除并返回集合中的一个随机元素
	11	SRANDMEMBER key [count] 
	返回集合中一个或多个随机数
	12	SREM key member1 [member2] 
	移除集合中一个或多个成员
	13	SUNION key1 [key2] 
	返回所有给定集合的并集
	14	SUNIONSTORE destination key1 [key2] 
	所有给定集合的并集存储在 destination 集合中
	15	SSCAN key cursor [MATCH pattern] [COUNT count] 
	迭代集合中的元素

《Redis SortedSet命令》:
	1	ZADD key score1 member1 [score2 member2] 
	向有序集合添加一个或多个成员，或者更新已存在成员的分数
	2	ZCARD key 
	获取有序集合的成员数
	3	ZCOUNT key min max 
	计算在有序集合中指定区间分数的成员数
	4	ZINCRBY key increment member 
	有序集合中对指定成员的分数加上增量 increment
	5	ZINTERSTORE destination numkeys key [key ...] 
	计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中
	6	ZLEXCOUNT key min max 
	在有序集合中计算指定字典区间内成员数量
	7	ZRANGE key start stop [WITHSCORES] 
	通过索引区间返回有序集合成指定区间内的成员
	8	ZRANGEBYLEX key min max [LIMIT offset count] 
	通过字典区间返回有序集合的成员
	9	ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT] 
	通过分数返回有序集合指定区间内的成员
	10	ZRANK key member 
	返回有序集合中指定成员的索引
	11	ZREM key member [member ...] 
	移除有序集合中的一个或多个成员
	12	ZREMRANGEBYLEX key min max 
	移除有序集合中给定的字典区间的所有成员
	13	ZREMRANGEBYRANK key start stop 
	移除有序集合中给定的排名区间的所有成员
	14	ZREMRANGEBYSCORE key min max 
	移除有序集合中给定的分数区间的所有成员
	15	ZREVRANGE key start stop [WITHSCORES] 
	返回有序集中指定区间内的成员，通过索引，分数从高到底
	16	ZREVRANGEBYSCORE key max min [WITHSCORES] 
	返回有序集中指定分数区间内的成员，分数从高到低排序
	17	ZREVRANK key member 
	返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序
	18	ZSCORE key member 
	返回有序集中，成员的分数值
	19	ZUNIONSTORE destination numkeys key [key ...] 
	计算给定的一个或多个有序集的并集，并存储在新的 key 中
	20	ZSCAN key cursor [MATCH pattern] [COUNT count] 
	迭代有序集合中的元素（包括元素成员和元素分值）
		

7.Redis 发布订阅
	psubscribe pattern  [pattern...]	
		订阅一个或多个符合给定模式的频道
	
	pubsub subcomman [argument[argument..]]
		查看订阅与发布系统状态。
	
	punsubscribe pattern [pattern...]
		退订所有给定模式的频道

	publish channel message
		将message 发送到指定的频道channel

	subscribe channel [channel...]
		订阅一个或多个频道消息
	unsubscribe channel [channel...]	
		退订一个或多个频道

8.Redis事务
	Redis事务可以一次执行多个命令,有如下特性：	
		批量操作在发送 EXEC 命令前被放入队列缓存。
		收到 EXEC 命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。
		在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。
	一个事务从开始到执行经历三个阶段：
		开始事务、命令入队、执行事务
	已multi命令开始，exec命令结束
	
	单个 Redis 命令的执行是原子性的，但 Redis 没有在事务上增加任何维持原子性的机制，所以 Redis 事务的执行并不是原子性的。

	《Redis事务命令》：
		discard
			取消事务，放弃执行事务块内的所有命令
		exec
			执行所有事务块内的命令
		multi
			标记一个事务块的开始
		unwatch	
			取消watch命令对所有key的监视
		watch key [key...]
			监视一个（或多个）key,如果在事务执行之前这个
				（或这些）key被其他命令所改动，那么事务将被打断

9.Redis脚本
	Redis 脚本使用 Lua 解释器来执行脚本

	Eval 命令的基本语法如下：
		EVAL script numkeys key [key ...] arg [arg ...]

	《Redis脚本命令》：
		EVAL script numkeys key [key...] arg [arg...]
			执行Lua脚本
		EVALSHA sha1 numkeys key [key ...] arg [arg ...] 
			执行 Lua 脚本。
		SCRIPT EXISTS script [script ...] 
			查看指定脚本是否已经被保存在缓存中
		script flush
			从脚本缓存中移除所有脚本
		script kill
			杀死当前正在运行的Lua脚本
		script load script
			将脚本script添加到脚本缓存中，但并不
				立即执行这个脚本
			
10.《Redis连接命令》
	auth passwod 
		验证密码是否正确
	echo message
		打印字符串
	ping
		查看服务是否运行
	quit
		关闭当前连接
	select index
		切换到指定的数据库

11.《Redis服务器命令》
	1	BGREWRITEAOF 
	异步执行一个 AOF（AppendOnly File） 文件重写操作
	2	BGSAVE 
	在后台异步保存当前数据库的数据到磁盘
	3	CLIENT KILL [ip:port] [ID client-id] 
	关闭客户端连接
	4	CLIENT LIST 
	获取连接到服务器的客户端连接列表
	5	CLIENT GETNAME 
	获取连接的名称
	6	CLIENT PAUSE timeout 
	在指定时间内终止运行来自客户端的命令
	7	CLIENT SETNAME connection-name 
	设置当前连接的名称
	8	CLUSTER SLOTS 
	获取集群节点的映射数组
	9	COMMAND 
	获取 Redis 命令详情数组
	10	COMMAND COUNT 
	获取 Redis 命令总数
	11	COMMAND GETKEYS 
	获取给定命令的所有键
	12	TIME 
	返回当前服务器时间
	13	COMMAND INFO command-name [command-name ...] 
	获取指定 Redis 命令描述的数组
	14	CONFIG GET parameter 
	获取指定配置参数的值
	15	CONFIG REWRITE 
	对启动 Redis 服务器时所指定的 redis.conf 配置文件进行改写
	16	CONFIG SET parameter value 
	修改 redis 配置参数，无需重启
	17	CONFIG RESETSTAT 
	重置 INFO 命令中的某些统计数据
	18	DBSIZE 
	返回当前数据库的 key 的数量
	19	DEBUG OBJECT key 
	获取 key 的调试信息
	20	DEBUG SEGFAULT 
	让 Redis 服务崩溃
	21	FLUSHALL 
	删除所有数据库的所有key
	22	FLUSHDB 
	删除当前数据库的所有key
	23	INFO [section] 
	获取 Redis 服务器的各种信息和统计数值
	24	LASTSAVE 
	返回最近一次 Redis 成功将数据保存到磁盘上的时间，以 UNIX 时间戳格式表示
	25	MONITOR 
	实时打印出 Redis 服务器接收到的命令，调试用
	26	ROLE 
	返回主从实例所属的角色
	27	SAVE 
	同步保存数据到硬盘
	28	SHUTDOWN [NOSAVE] [SAVE] 
	异步保存数据到硬盘，并关闭服务器
	29	SLAVEOF host port 
	将当前服务器转变为指定服务器的从属服务器(slave server)
	30	SLOWLOG subcommand [argument] 
	管理 redis 的慢日志
	31	SYNC 
	用于复制功能(replication)的内部命令

12.Redis备份与恢复
	save
		将当前数据库数据保存到磁盘
		会在Redis目录下dump.rdb文件
	bgsave 后台保存至磁盘
	
	备份
		备份dump.rdb文件即可
	恢复
		将备份的dump.rdb文件移至Redis安装目录下启动服务即可


13.Redis安全
	查看是否设置密码：
		config get requirepass

	设置密码：
		config set requirepass password
	密码验证（设置密码后不验证干不了任何事）：
		auth password

14.性能测试
	redis-benchmark [option] [option value]
		
	例：
		redis-benchmark -n 1000
		redis-benchmark -h 127.0.0.1 -p 6379 -t set,lpush -n 10000 -q


	性能测试可选参数：
		1	-h	指定服务器主机名	127.0.0.1
		2	-p	指定服务器端口	6379
		3	-s	指定服务器 socket	
		4	-c	指定并发连接数	50
		5	-n	指定请求数	10000
		6	-d	以字节的形式指定 SET/GET 值的数据大小	2
		7	-k	1=keep alive 0=reconnect	1
		8	-r	SET/GET/INCR 使用随机 key, SADD 使用随机值	
		9	-P	通过管道传输 <numreq> 请求	1
		10	-q	强制退出 redis。仅显示 query/sec 值	
		11	--csv	以 CSV 格式输出	
		12	-l	生成循环，永久执行测试	
		13	-t	仅运行以逗号分隔的测试命令列表。	
		14	-I	Idle 模式。仅打开 N 个 idle 连接并等待。
	
		
15.客户端连接
	最大连接数：
		显示最大连接数
		config get maxclients

	redis-server --maxclients 10000 
		初始化时设置最大连接数为10000

	《客户端命令》
		client list 返回连接到redis服务的客户端列表
		client setname 设置当前连接的名称
		client getname 获取当前连接的名称
		client pause 挂起客户端连接（时间为毫秒）
		client kill 关闭客户端连接
			CLIENT KILL ip:port
	
16.Redis分区、管道技术
