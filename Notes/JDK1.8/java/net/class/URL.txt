static final String BUILTIN_HANDLERS_PREFIX = "sun.net.www.protocol";
    static final long serialVersionUID = -7627629688361524110L;


    private static final String protocolPathProp = "java.protocol.handler.pkgs";

  
    private String protocol;  --协议
  
   
   private String host;     --主机

    private int port = -1;   --端口（默认-1）


    private String file;  --文件


    private transient String query;  --查询

   
    private String authority;  --授权

 
    private transient String path; --路径

 
    private transient String userInfo; --用户信息


    private String ref; --引用

  
    transient InetAddress hostAddress;  --主机地址

   
    transient URLStreamHandler handler; --URL流处理器

   
    private int hashCode = -1;

    private transient UrlDeserializedState tempState;


    public URL(String protocol, String host, int port, String file)    --构造 参数（协议，主机，端口，文件）
        throws MalformedURLException
  

    public URL(String protocol, String host, String file)  --构造 参数（协议，主机，文件）
            throws MalformedURLException {

    public URL(String protocol, String host, int port, String file,
               URLStreamHandler handler) throws MalformedURLException {    --构造 参数（协议，主机，端口，文件）
        
    public URL(String spec) throws MalformedURLException {   --构造 参数（url字符串）
        this(null, spec); 
    }


    public URL(URL context, String spec) throws MalformedURLException {  --构造 参数（URL,url字符串）


    public URL(URL context, String spec, URLStreamHandler handler)  --构造 参数（URL,url字符串，URLStreamHandler）
        throws MalformedURLException
    

    private boolean isValidProtocol(String protocol) {     --验证协议


    
    private void checkSpecifyHandler(SecurityManager sm) {   --检查流处理的权限
    

    void set(String protocol, String host, int port,
             String file, String ref) {  --设置（协议，主机，端口，引用）


 
    void set(String protocol, String host, int port,
             String authority, String userInfo, String path,  
             String query, String ref) {  --设置（协议，主机，端口，身份，用户信息，路径，查询，引用）



    public String getQuery() {  --query 属性get



    public String getPath() {  --path 属性get
 
   
    public String getUserInfo() {   --userInfo 属性get



    public String getAuthority() {  --userInfo 属性get
   

 
    public int getPort() { -port 属性get
  

    public int getDefaultPort() { --获取处理器的默认端口
 
    public String getProtocol() { --protocol 属性get
  

    public String getHost() { --host 属性get


    public String getFile() { --file 属性get


    public String getRef() { --ref 属性get
  
    public boolean equals(Object obj) {  --引用 equals
  
  
    public synchronized int hashCode() { --hashcode


    public boolean sameFile(URL other) {   --是否有相同的file


    public String toString() {   --toString 

    public String toExternalForm() {  --字符串表现形式
    

    public URI toURI() throws URISyntaxException {   --转URI
 

    public URLConnection openConnection() throws java.io.IOException {  --打开连接
   

    public URLConnection openConnection(Proxy proxy)  --打开连接 参数（代理）
        throws java.io.IOException {
   

    public final InputStream openStream() throws java.io.IOException {  --打开流 返回输入流
 

    public final Object getContent() throws java.io.IOException {  --获取内容
   

    public final Object getContent(Class[] classes)  --获取内容 参数（类类型）
    throws java.io.IOException {
     


    static URLStreamHandlerFactory factory;

   
    public static void setURLStreamHandlerFactory(URLStreamHandlerFactory fac) {  --设置URL流流处理器工厂 参数（流处理工厂）
  

    static Hashtable<String,URLStreamHandler> handlers = new Hashtable<>();
    private static Object streamHandlerLock = new Object();



    static URLStreamHandler getURLStreamHandler(String protocol) {  --获取URL流处理器

    private static final ObjectStreamField[] serialPersistentFields = {  --指定哪些字段需要被默认序列化
        new ObjectStreamField("protocol", String.class),
        new ObjectStreamField("host", String.class),
        new ObjectStreamField("port", int.class),
        new ObjectStreamField("authority", String.class),
        new ObjectStreamField("file", String.class),
        new ObjectStreamField("ref", String.class),
        new ObjectStreamField("hashCode", int.class), };


    private synchronized void writeObject(java.io.ObjectOutputStream s)
        throws IOException                                                      --写入URL到输出流



    private synchronized void readObject(java.io.ObjectInputStream s)  --从URL读出到输入流
            throws IOException, ClassNotFoundException {
 


   private Object readResolve() throws ObjectStreamException {   --替换从流中读取的对象


    private URL setDeserializedFields(URLStreamHandler handler) {  --设置需要反序列化的字段
      

    private URL fabricateNewURL()   --配置新的URL
                throws InvalidObjectException {
     

    boolean isBuiltinStreamHandler(URLStreamHandler handler) {--判断是否是流处理器  参数（流处理器）
       return isBuiltinStreamHandler(handler.getClass().getName());
    }
 
    private boolean isBuiltinStreamHandler(String handlerClassName) {  --判断是否是流处理器 参数（流处理器类名）
        return (handlerClassName.startsWith(BUILTIN_HANDLERS_PREFIX));
    }

    private void resetState() {  --重置状态 为null
     

    private void setSerializedHashCode(int hc) { --设置序列化hashcode
   
}

class Parts {
    String path, query, ref;

    Parts(String file) {
        int ind = file.indexOf('#');
        ref = ind < 0 ? null: file.substring(ind + 1);
        file = ind < 0 ? file: file.substring(0, ind);
        int q = file.lastIndexOf('?');
        if (q != -1) {
            query = file.substring(q+1);
            path = file.substring(0, q);
        } else {
            path = file;
        }
    }

    String getPath() {
        return path;
    }

    String getQuery() {
        return query;
    }

    String getRef() {
        return ref;
    }
}

final class UrlDeserializedState {
    private final String protocol;
    private final String host;
    private final int port;
    private final String authority;
    private final String file;
    private final String ref;
    private final int hashCode;

    public UrlDeserializedState(String protocol,
                                String host, int port,
                                String authority, String file,
                                String ref, int hashCode) {   --构造 参数（协议，主机，端口，身份，文件，引用，hashcode））


    String getProtocol() {
        return protocol;
    }

    String getHost() {
        return host;
    }

    String getAuthority () {
        return authority;
    }

    int getPort() {
        return port;
    }

    String getFile () {
        return file;
    }

    String getRef () {
        return ref;
    }

    int getHashCode () {
        return hashCode;
    }

    String reconstituteUrlString() {

        // pre-compute length of StringBuilder
        int len = protocol.length() + 1;
        if (authority != null && authority.length() > 0)
            len += 2 + authority.length();
        if (file != null) {
            len += file.length();
        }
        if (ref != null)
            len += 1 + ref.length();
        StringBuilder result = new StringBuilder(len);
        result.append(protocol);
        result.append(":");
        if (authority != null && authority.length() > 0) {
            result.append("//");
            result.append(authority);
        }
        if (file != null) {
            result.append(file);
        }
        if (ref != null) {
            result.append("#");
            result.append(ref);
        }
        return result.toString();
    }