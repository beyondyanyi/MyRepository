
		   IP 规定了 4 种服务类型, 用来定性地描述服务的质量.
              低成本: 发送成本低.
              高可靠性: 保证把数据可靠地送达目的地.
              最高吞吐量: 一次可以接收或发送大批量的数据.
              最小延迟: 传输数据的速度快, 把数据快速送达目的地.



    public void
        setOption(int optID, Object value) throws SocketException;  --设置Option arg(optId,value)


    public Object getOption(int optID) throws SocketException;   --getOption arg(optId)


    @Native public final static int TCP_NODELAY = 0x0001;     --tcp Nagle算法  setTcpToDelay(true)关闭Nagle算法，关闭延迟发送
	
															Nagle算法产生的背景：
																当网络传输中存在大量小包传输时，会严重影响传输效率。比如一个包，包头40字节，而真正的内容只有一个字节或者几个字节（典型的有Telnet），这样的传输效率是十分低下的。
																	Nagle算法要解决的就是这种低效率的传输问题。

    @Native public final static int SO_BINDADDR = 0x000F;     --绑定地址

    @Native public final static int SO_REUSEADDR = 0x04;	  --重用地址 setResuseAddress(true) 可立即重用端口，不用等待端口释放
	
																这个选项可以使多个Socket对象绑定在同一个端口上
	
															使用SO_REUSEADDR选项时有两点需要注意：
														       1. 必须在调用bind方法之前使用setReuseAddress方法来打开SO_REUSEADDR选项。因此，要想使用SO_REUSEADDR选项，就不能通过Socket类的构造方法来绑定端口。
														       2. 必须将绑定同一个端口的所有的Socket对象的SO_REUSEADDR选项都打开才能起作用。


    @Native public final static int SO_BROADCAST = 0x0020;	 --用来控制广播，目前只有在DatagramSocket里支持。
 
    @Native public final static int IP_MULTICAST_IF = 0x10;  --来控制多播的参数选项，目前只有在MulticastSocket里支持
 
    @Native public final static int IP_MULTICAST_IF2 = 0x1f;  --设置用于发送多播包的传出接口

    @Native public final static int IP_MULTICAST_LOOP = 0x12;  --此选项启用或禁用多播数据报的本地回送

    @Native public final static int IP_TOS = 0x3;    		--用来控制IP头中的TOS字段的，是用来控制和优化IP包的路径的，在Socket源代码里有一个设置的方法

    @Native public final static int SO_LINGER = 0x0080;		--这个Socket选项可以影响close方法的行为
																在默认情况下，当调用close方法后，将立即返回；如果这时仍然有未被送出的数据包，那么这些数据包将被丢弃。
																如果将linger参数设为一个正整数n时（n的值最大是65，535），在调用close方法后，将最多被阻塞n秒。在这n秒内，系统将尽量将未送出的数据包发送出去；如果超过了n秒，如果还有未发送的数据包，这些数据包将全部被丢弃；而close方法会立即返回。如果将linger设为0，和关闭SO_LINGER选项的作用是一样的


    @Native public final static int SO_TIMEOUT = 0x1006; 	--这个Socket选项用来设置读取数据超时
	
															当输入流的read方法被阻塞时，如果设置timeout（timeout的单位是毫秒），那么系统在等待了timeout毫秒后会抛出一个InterruptedIOException例外。在抛出例外后，输入流并未关闭，可以继续通过read方法读取数据。
														      如果将timeout设为0，就意味着read将会无限等待下去，直到服务端程序关闭这个Socket.这也是timeout的默认值。如下面的语句将读取数据超时设为30秒：socket1.setSoTimeout( 30 * 1000 );
														      当底层的Socket实现不支持SO_TIMEOUT选项时，这两个方法将抛出SocketException例外。不能将timeout设为负数，否则setSoTimeout方法将抛出IllegalArgumentException例外

    @Native public final static int SO_SNDBUF = 0x1001;     --发送缓存
																在默认情况下，输出流的发送缓冲区是8096个字节（8K）
																这个值是Java所建议的输出缓冲区的大小。如果这个默认值不能满足要求，可以用 setSendBufferSize方法来重新设置缓冲区的大小。但最好不要将输出缓冲区设得太小，否则会导致传输数据过于频繁，从而降低网络传输的效率
																果底层的Socket实现不支持SO_SENDBUF选项，这两个方法将会抛出SocketException例外。必须将size设为正整数，否则setSendBufferedSize方法将抛出IllegalArgumentException例外

    @Native public final static int SO_RCVBUF = 0x1002;     --接收缓存
																  在默认情况下，输入流的接收缓冲区是8096个字节（8K）。这个值是Java所建议的输入缓冲区的大小。如果这个默认值不能满足要求，可以用 setReceiveBufferSize方法来重新设置缓冲区的大小。但最好不要将输入缓冲区设得太小，否则会导致传输数据过于频繁，从而降低网络传输的效率。
       																如果底层的Socket实现不支持SO_RCVBUF选项，这两个方法将会抛出SocketException例外。必须将size设为正整数，否则setReceiveBufferSize方法将抛出IllegalArgumentException例外。

	
    @Native public final static int SO_KEEPALIVE = 0x0008;   --保持活动
																	   如果将这个Socket选项打开，客户端Socket每隔段的时间（大约两个小时）就会利用空闲的连接向服务器发送一个数据包。这个数据包并没有其它的作用，只是为了检测一下服务器是否仍处于活动状态。
																		如果服务器未响应这个数据包，在大约11分钟后，客户端Socket再发送一个数据包，如果在12分钟内，服务器还没响应，那么客户端Socket将关闭。如果将Socket选项关闭，客户端Socket在服务器无效的情况下可能会长时间不会关闭。
																		SO_KEEPALIVE选项在默认情况下是关闭的，可以使用如下的语句将这个SO_KEEPALIVE选项打开：socket1.setKeepAlive( true );

  
    @Native public final static int SO_OOBINLINE = 0x1003;
															     如果这个Socket选项打开，可以通过Socket类的sendUrgentData方法向服务器发送一个单字节的数据。这个单字节数据并不经过输出缓冲区，而是立即发出。虽然在客户端并不是使用OutputStream向服务器发送数据，但在服务端程序中这个单字节的数据是和其它的普通数据混在一起的。因此，在服务端程序中并不知道由客户端发过来的数据是由OutputStream还是由sendUrgentData发过来的。注意：在使用setOOBInline方法打开SO_OOBINLINE选项时要注意是必须在客户端和服务端程序同时使用setOOBInline方法打开这个选项，否则无法命名用sendUrgentData来发送数据
