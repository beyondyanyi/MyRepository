###1.基础命令：

查看版本
node --version 
npm  -v

npm install <ModuleName> 本地安装 (放在node_modules下)，使用require()来引入包

npm install <ModuleName> -g 全局安装（放在/usr/local下或node安装目录），直接在命令行中使用

npm uninstall <ModuleName> 卸载模块

npm update <ModuleName> 更新模块

npm search <ModuleName> 搜索模块

npm list -g 查看所有全局安装模块

npm list <ModuleName> 查看某个模块的版本号

npm update <package>把当前目录下node_modules子目录里边的对应模块更新至最新版本
npm update <package> -g

npm cache clear 清空npm本地缓存

npm unpublish <package>@<version> 撤销发布自己发布过的某个版本代码

node 启动node终端

package.json属性说明：（package.json 用于定义包的属性）
	name-包名
	version-包的版本号
	description-包的描述
	homepage-包的官网url
	author-包的作者姓名
	contributors-包的其他贡献者姓名
	dependencies-依赖包列表
	repository-包代码存放的地方的类型（git、svn）
	main-main字段指定了程序的主入口文件，require('moduleName')就会加载这个文件，该字段的默认值是模块根目录下面的index.js
	keywords-关键字




版本号：
	XYZ三位版本号：
		z:修复bug
		y:新增功能，并且向下兼容
		x:向下不兼容

使用淘宝NPM镜像：
	
	1.使用淘宝定制的cnpm命令行工具代替默认的npm:
			npm install -g cnpm --registry=https://registry.npm.taobao.org
	
	2.使用cnpm命令安装模块：
			cnpm install [name]


###2.REPL(交互式解释器)
	REPL(Read Eval Print Loop交互式解释器)表示一个电脑的环境，类似Window系统的终端或Unix/Linux shell,可以在其中输入命令，接收系统的响应
	Node自带了交互式解释器，可执行以下任务：
	  读取、执行、打印、循环

	
	REPL命令：
		ctrl+c   -退出当前终端
		ctrl+c(double) -退出Node REPL
		ctrl+d -退出Node REPL
		up/down -查看输入的历史命令
		tab 	-列出当前命令
		.help   -列出使用命令
		.break  -列出多行表达式
		.clear  -退出多行表达式
		.save filename -保存当前Node REPL会话到指定文件
		.load filename -载入当前Node REPL会话的文件内容




###3.EventEmitter类
	events模块只提供了一个对象：events.EventEmitter。   
		EventEmitter的核心就是事件触发与事件监听器功能的封装
		EventEmitter对象如果再实例化时发生错误，会触发error事件。
		当添加新的监听器时，newListener事件会触发
		当监听器被移除时，removeListener事件被触发

	1.方法：
		addListener(event,listener)
			为指定事件添加一个监听器到监听器数组的尾部

		on(event,listener)
			为指定事件注册一个监听器，接受一个字符串event和一个回调函数

		once(event,listener)
			为指定事件注册一个单次监听器，即触发一次后立刻解除该监听器
		
		removeListener(event,listener)
			移除指定事件的某个监听器，监听器必须是该事件已经注册过的监听器

		removeAllListeners([event])
			移除所有事件的所有监听器，如果指定事件，则移除指定事件的所有监听器

		setMaxListeners(n)
			默认情况下，EventEmitters如果你添加的监听器超过10个就会输出警告信息。
			setMaxListeners函数用于提高监听器的默认限制的数量
			
		listeners(event)
			返回指定事件的监听器数组

		emit(event,[arg1],[arg2],....,[argx])
			按参数的顺序执行每个监听器，如果事件有注册监听返回true,则返回false

	2.类方法：
		listenerCount(emitter,event)
			返回指定事件的监听器数量
	3.事件
		newListener
			-event 字符串，事件名称
			-listener 处理事件函数
		    该事件在添加新监听器时被触发

		removeListener
			-event 字符串，事件名称
			-listener 处理事件的函数



	error事件:
		EventEmitter中的特殊事件，在遇到异常时触发。
		当error被触发时，EventEmitter规定如果没有响应的监听器，Node.js会把它当作异常，
			退出程序并输出错误信息。一般要为会触发error事件的对象设置监听器，
			避免遇到错误后整个程序崩溃



###4.Node.js Buffer(缓冲区)
	
	Buffer类，用来创建一个专门存放二进制数据的缓冲区



	Buffer字符编码转换：
		const buf=Buffer.from('this is string','ascii');
		console.log(buf.toString('hex'));

	Node.js目前支持的字符编码：
		ascii、utf8、utf16le、ucs2、base64、latin1、binary、hex


	创建Buffer类：
		Buffer.alloc(size,[,fill[,encoding]])  :返回一个指定大小的Buffer实例，如果没有fill,则默认用0填满

		Buffer.allocUnsafe(size)   :返回一个指定大小的Buffer实例，但是它不会被初始化，所以可能包含敏感的数据

		Buffer.allocUnsafeSlow(size) 

		Buffer.from(array) :返回一个被array的值初始化的新的Buffer实例（传入的array的元素只能是数字，不然就会自动被0覆盖）

		Buffer.from(arrayBuffer[,byteOffset[,length]]) :返回一个新建的与给定的ArrayBuffer共享同一内存的Buffer

		Buffer.from(buffer) :复制传入的Buffer实例的数据，并返回一个新的Buffer实例

		Buffer.from(string[,encoding]) :返回一个被string的值初始化的新的Buffer实例


	写入缓冲区：
		buf.write(string[,offset[,length]][,encoding])
			-string  写入缓冲区的字符串
			-offset  缓冲区开始写入的索引值，默认为0
			-length  写入的字节数，默认为buffer.length
			-encoding 使用的编码，默认为utf8

			(如果buf没有足够的空间保存整个字符串，则只会写入string的一部分。只部分解码的字符不会被写入)
			
			-返回值 返回实际写入的大小。如果buf空间不足，则只会写入部分字符串



	从缓冲区读取数据：	
		buf.toString([encoding[,start[,end]]])
			-encoding 编码，默认为utf8
			-start 指定开始读取的索引位置，默认为0
			-end 结束位置，默认为缓冲区的末尾
			-返回值  字符串
	
	将Buffer转换为JSON对象：
		buf.toJSON()
		   当字符串转化为一个Buffer实例时，JSON.stringify()会隐式地调用该toJSON()
			-返回值 JSON对象


	缓冲区合并：
		Buffer.concat(list[,totalLength])
			-list	用于合并的Buffer对象数组列表
			-totalLength	指定合并后Buffer对象的总长度
			-返回值 返回一个多个成员合并的新Buffer对象

	缓冲区比较：
		buf.compare(otherBuffer)
			-otherBuffer 与buf对象比较的另一个Buffer对象
			-返回值 返回一个数字,表示buf在otherBuffer之前，之后或相同

	拷贝缓冲区：
		buf.copy(targetBuffer[,targetStart[,sourceStart[,sourceEnd]]])
			-targetBuffer 要拷贝的Buffer对象
			-targetStart  数字，可选，默认：0
			-sourceStart  数字，可选，默认：0
			-sourceEnd    数字，可选，默认：buffer.length

			没有返回值

	
	缓冲区裁剪：
		buf.slice([start[,end]])
			-start 数字，可选，默认：0
			-end  数字，可选，默认：buffer.length
			-返回值 返回一个新的缓冲区，它和旧缓冲区指向同一块内存，
				但是从索引start到end的位置剪切

	缓冲区长度：
		buf.length;
			-返回值 返回Buffer对象所占据的内存长度



	Buffer常用方法：
		1	new Buffer(size) 
		分配一个新的 size 大小单位为8位字节的 buffer。 注意, size 必须小于 kMaxLength，否则，将会抛出异常 RangeError。废弃的: 使用 Buffer.alloc() 代替（或 Buffer.allocUnsafe()）。
		2	new Buffer(buffer) 
		拷贝参数 buffer 的数据到 Buffer 实例。废弃的: 使用 Buffer.from(buffer) 代替。
		3	new Buffer(str[, encoding])
		分配一个新的 buffer ，其中包含着传入的 str 字符串。 encoding 编码方式默认为 'utf8'。 废弃的: 使用 Buffer.from(string[, encoding]) 代替。
		4	buf.length
		返回这个 buffer 的 bytes 数。注意这未必是 buffer 里面内容的大小。length 是 buffer 对象所分配的内存数，它不会随着这个 buffer 对象内容的改变而改变。
		5	buf.write(string[, offset[, length]][, encoding])
		根据参数 offset 偏移量和指定的 encoding 编码方式，将参数 string 数据写入buffer。 offset 偏移量默认值是 0, encoding 编码方式默认是 utf8。 length 长度是将要写入的字符串的 bytes 大小。 返回 number 类型，表示写入了多少 8 位字节流。如果 buffer 没有足够的空间来放整个 string，它将只会只写入部分字符串。 length 默认是 buffer.length - offset。 这个方法不会出现写入部分字符。
		6	buf.writeUIntLE(value, offset, byteLength[, noAssert])
		将 value 写入到 buffer 里， 它由 offset 和 byteLength 决定，最高支持 48 位无符号整数，小端对齐，例如：
		const buf = Buffer.allocUnsafe(6);

		buf.writeUIntLE(0x1234567890ab, 0, 6);

		// 输出: <Buffer ab 90 78 56 34 12>
		console.log(buf); noAssert 值为 true 时，不再验证 value 和 offset 的有效性。 默认是 false。
		7	buf.writeUIntBE(value, offset, byteLength[, noAssert])
		将 value 写入到 buffer 里， 它由 offset 和 byteLength 决定，最高支持 48 位无符号整数，大端对齐。noAssert 值为 true 时，不再验证 value 和 offset 的有效性。 默认是 false。
		const buf = Buffer.allocUnsafe(6);

		buf.writeUIntBE(0x1234567890ab, 0, 6);

		// 输出: <Buffer 12 34 56 78 90 ab>
		console.log(buf);
		8	buf.writeIntLE(value, offset, byteLength[, noAssert])
		将value 写入到 buffer 里， 它由offset 和 byteLength 决定，最高支持48位有符号整数，小端对齐。noAssert 值为 true 时，不再验证 value 和 offset 的有效性。 默认是 false。
		9	buf.writeIntBE(value, offset, byteLength[, noAssert])
		将value 写入到 buffer 里， 它由offset 和 byteLength 决定，最高支持48位有符号整数，大端对齐。noAssert 值为 true 时，不再验证 value 和 offset 的有效性。 默认是 false。
		10	buf.readUIntLE(offset, byteLength[, noAssert])
		支持读取 48 位以下的无符号数字，小端对齐。noAssert 值为 true 时， offset 不再验证是否超过 buffer 的长度，默认为 false。
		11	buf.readUIntBE(offset, byteLength[, noAssert])
		支持读取 48 位以下的无符号数字，大端对齐。noAssert 值为 true 时， offset 不再验证是否超过 buffer 的长度，默认为 false。
		12	buf.readIntLE(offset, byteLength[, noAssert])
		支持读取 48 位以下的有符号数字，小端对齐。noAssert 值为 true 时， offset 不再验证是否超过 buffer 的长度，默认为 false。
		13	buf.readIntBE(offset, byteLength[, noAssert])
		支持读取 48 位以下的有符号数字，大端对齐。noAssert 值为 true 时， offset 不再验证是否超过 buffer 的长度，默认为 false。
		14	buf.toString([encoding[, start[, end]]])
		根据 encoding 参数（默认是 'utf8'）返回一个解码过的 string 类型。还会根据传入的参数 start (默认是 0) 和 end (默认是 buffer.length)作为取值范围。
		15	buf.toJSON()
		将 Buffer 实例转换为 JSON 对象。
		16	buf[index]
		获取或设置指定的字节。返回值代表一个字节，所以返回值的合法范围是十六进制0x00到0xFF 或者十进制0至 255。
		17	buf.equals(otherBuffer)
		比较两个缓冲区是否相等，如果是返回 true，否则返回 false。
		18	buf.compare(otherBuffer)
		比较两个 Buffer 对象，返回一个数字，表示 buf 在 otherBuffer 之前，之后或相同。
		19	buf.copy(targetBuffer[, targetStart[, sourceStart[, sourceEnd]]])
		buffer 拷贝，源和目标可以相同。 targetStart 目标开始偏移和 sourceStart 源开始偏移默认都是 0。 sourceEnd 源结束位置偏移默认是源的长度 buffer.length 。
		20	buf.slice([start[, end]])
		剪切 Buffer 对象，根据 start(默认是 0 ) 和 end (默认是 buffer.length ) 偏移和裁剪了索引。 负的索引是从 buffer 尾部开始计算的。
		21	buf.readUInt8(offset[, noAssert])
		根据指定的偏移量，读取一个无符号 8 位整数。若参数 noAssert 为 true 将不会验证 offset 偏移量参数。 如果这样 offset 可能会超出buffer 的末尾。默认是 false。
		22	buf.readUInt16LE(offset[, noAssert])
		根据指定的偏移量，使用特殊的 endian 字节序格式读取一个无符号 16 位整数。若参数 noAssert 为 true 将不会验证 offset 偏移量参数。 这意味着 offset 可能会超出 buffer 的末尾。默认是 false。
		23	buf.readUInt16BE(offset[, noAssert])
		根据指定的偏移量，使用特殊的 endian 字节序格式读取一个无符号 16 位整数，大端对齐。若参数 noAssert 为 true 将不会验证 offset 偏移量参数。 这意味着 offset 可能会超出 buffer 的末尾。默认是 false。
		24	buf.readUInt32LE(offset[, noAssert])
		根据指定的偏移量，使用指定的 endian 字节序格式读取一个无符号 32 位整数，小端对齐。 若参数 noAssert 为 true 将不会验证 offset 偏移量参数。 这意味着 offset 可能会超出buffer 的末尾。默认是 false。
		25	buf.readUInt32BE(offset[, noAssert])
		根据指定的偏移量，使用指定的 endian 字节序格式读取一个无符号 32 位整数，大端对齐。 若参数 noAssert 为 true 将不会验证 offset 偏移量参数。 这意味着 offset 可能会超出buffer 的末尾。默认是 false。
		26	buf.readInt8(offset[, noAssert])
		根据指定的偏移量，读取一个有符号 8 位整数。 若参数 noAssert 为 true 将不会验证 offset 偏移量参数。 这意味着 offset 可能会超出 buffer 的末尾。默认是 false。
		27	buf.readInt16LE(offset[, noAssert])
		根据指定的偏移量，使用特殊的 endian 格式读取一个 有符号 16 位整数，小端对齐。 若参数 noAssert 为 true 将不会验证 offset 偏移量参数。 这意味着 offset 可能会超出 buffer 的末尾。默认是 false。
		28	buf.readInt16BE(offset[, noAssert])
		根据指定的偏移量，使用特殊的 endian 格式读取一个 有符号 16 位整数，大端对齐。 若参数 noAssert 为 true 将不会验证 offset 偏移量参数。 这意味着 offset 可能会超出 buffer 的末尾。默认是 false。
		29	buf.readInt32LE(offset[, noAssert])
		根据指定的偏移量，使用指定的 endian 字节序格式读取一个有符号 32 位整数，小端对齐。 若参数 noAssert 为 true 将不会验证 offset 偏移量参数。 这意味着 offset 可能会超出buffer 的末尾。默认是 false。
		30	buf.readInt32BE(offset[, noAssert])
		根据指定的偏移量，使用指定的 endian 字节序格式读取一个有符号 32 位整数，大端对齐。 若参数 noAssert 为 true 将不会验证 offset 偏移量参数。 这意味着 offset 可能会超出buffer 的末尾。默认是 false。
		31	buf.readFloatLE(offset[, noAssert])
		根据指定的偏移量，使用指定的 endian 字节序格式读取一个 32 位双浮点数，小端对齐。 若参数 noAssert 为 true 将不会验证 offset 偏移量参数。 这意味着 offset 可能会超出buffer的末尾。默认是 false。
		32	buf.readFloatBE(offset[, noAssert])
		根据指定的偏移量，使用指定的 endian 字节序格式读取一个 32 位双浮点数，大端对齐。 若参数 noAssert 为 true 将不会验证 offset 偏移量参数。 这意味着 offset 可能会超出buffer的末尾。默认是 false。
		33	buf.readDoubleLE(offset[, noAssert])
		根据指定的偏移量，使用指定的 endian字节序格式读取一个 64 位双精度数，小端对齐。 若参数 noAssert 为 true 将不会验证 offset 偏移量参数。 这意味着 offset 可能会超出buffer 的末尾。默认是 false。
		34	buf.readDoubleBE(offset[, noAssert])
		根据指定的偏移量，使用指定的 endian字节序格式读取一个 64 位双精度数，大端对齐。 若参数 noAssert 为 true 将不会验证 offset 偏移量参数。 这意味着 offset 可能会超出buffer 的末尾。默认是 false。
		35	buf.writeUInt8(value, offset[, noAssert])
		根据传入的 offset 偏移量将 value 写入 buffer。注意：value 必须是一个合法的无符号 8 位整数。 若参数 noAssert 为 true 将不会验证 offset 偏移量参数。 这意味着 value 可能过大，或者 offset 可能会超出 buffer 的末尾从而造成 value 被丢弃。 除非你对这个参数非常有把握，否则不要使用。默认是 false。
		36	buf.writeUInt16LE(value, offset[, noAssert])
		根据传入的 offset 偏移量和指定的 endian 格式将 value 写入 buffer。注意：value 必须是一个合法的无符号 16 位整数，小端对齐。 若参数 noAssert 为 true 将不会验证 value 和 offset 偏移量参数。 这意味着 value 可能过大，或者 offset 可能会超出buffer的末尾从而造成 value 被丢弃。 除非你对这个参数非常有把握，否则尽量不要使用。默认是 false。
		37	buf.writeUInt16BE(value, offset[, noAssert])
		根据传入的 offset 偏移量和指定的 endian 格式将 value 写入 buffer。注意：value 必须是一个合法的无符号 16 位整数，大端对齐。 若参数 noAssert 为 true 将不会验证 value 和 offset 偏移量参数。 这意味着 value 可能过大，或者 offset 可能会超出buffer的末尾从而造成 value 被丢弃。 除非你对这个参数非常有把握，否则尽量不要使用。默认是 false。
		38	buf.writeUInt32LE(value, offset[, noAssert])
		根据传入的 offset 偏移量和指定的 endian 格式(LITTLE-ENDIAN:小字节序)将 value 写入buffer。注意：value 必须是一个合法的无符号 32 位整数，小端对齐。 若参数 noAssert 为 true 将不会验证 value 和 offset 偏移量参数。 这意味着value 可能过大，或者offset可能会超出buffer的末尾从而造成 value 被丢弃。 除非你对这个参数非常有把握，否则尽量不要使用。默认是 false。
		39	buf.writeUInt32BE(value, offset[, noAssert])
		根据传入的 offset 偏移量和指定的 endian 格式(Big-Endian:大字节序)将 value 写入buffer。注意：value 必须是一个合法的有符号 32 位整数。 若参数 noAssert 为 true 将不会验证 value 和 offset 偏移量参数。 这意味着 value 可能过大，或者offset可能会超出buffer的末尾从而造成 value 被丢弃。 除非你对这个参数非常有把握，否则尽量不要使用。默认是 false。
		40	buf.writeInt8(value, offset[, noAssert])
		41	buf.writeInt16LE(value, offset[, noAssert])
		根据传入的 offset 偏移量和指定的 endian 格式将 value 写入 buffer。注意：value 必须是一个合法的 signed 16 位整数。 若参数 noAssert 为 true 将不会验证 value 和 offset 偏移量参数。 这意味着 value 可能过大，或者 offset 可能会超出 buffer 的末尾从而造成 value 被丢弃。 除非你对这个参数非常有把握，否则尽量不要使用。默认是 false 。
		42	buf.writeInt16BE(value, offset[, noAssert])
		根据传入的 offset 偏移量和指定的 endian 格式将 value 写入 buffer。注意：value 必须是一个合法的 signed 16 位整数。 若参数 noAssert 为 true 将不会验证 value 和 offset 偏移量参数。 这意味着 value 可能过大，或者 offset 可能会超出 buffer 的末尾从而造成 value 被丢弃。 除非你对这个参数非常有把握，否则尽量不要使用。默认是 false 。
		43	buf.writeInt32LE(value, offset[, noAssert])
		根据传入的 offset 偏移量和指定的 endian 格式将 value 写入 buffer。注意：value 必须是一个合法的 signed 32 位整数。 若参数 noAssert 为 true 将不会验证 value 和 offset 偏移量参数。 这意味着 value 可能过大，或者 offset 可能会超出 buffer 的末尾从而造成 value 被丢弃。 除非你对这个参数非常有把握，否则尽量不要使用。默认是 false。
		44	buf.writeInt32BE(value, offset[, noAssert])
		根据传入的 offset 偏移量和指定的 endian 格式将 value 写入 buffer。注意：value 必须是一个合法的 signed 32 位整数。 若参数 noAssert 为 true 将不会验证 value 和 offset 偏移量参数。 这意味着 value 可能过大，或者 offset 可能会超出 buffer 的末尾从而造成 value 被丢弃。 除非你对这个参数非常有把握，否则尽量不要使用。默认是 false。
		45	buf.writeFloatLE(value, offset[, noAssert])
		根据传入的 offset 偏移量和指定的 endian 格式将 value 写入 buffer 。注意：当 value 不是一个 32 位浮点数类型的值时，结果将是不确定的。 若参数 noAssert 为 true 将不会验证 value 和 offset 偏移量参数。 这意味着 value可能过大，或者 offset 可能会超出 buffer 的末尾从而造成 value 被丢弃。 除非你对这个参数非常有把握，否则尽量不要使用。默认是 false。
		46	buf.writeFloatBE(value, offset[, noAssert])
		根据传入的 offset 偏移量和指定的 endian 格式将 value 写入 buffer 。注意：当 value 不是一个 32 位浮点数类型的值时，结果将是不确定的。 若参数 noAssert 为 true 将不会验证 value 和 offset 偏移量参数。 这意味着 value可能过大，或者 offset 可能会超出 buffer 的末尾从而造成 value 被丢弃。 除非你对这个参数非常有把握，否则尽量不要使用。默认是 false。
		47	buf.writeDoubleLE(value, offset[, noAssert])
		根据传入的 offset 偏移量和指定的 endian 格式将 value 写入 buffer。注意：value 必须是一个有效的 64 位double 类型的值。 若参数 noAssert 为 true 将不会验证 value 和 offset 偏移量参数。 这意味着 value 可能过大，或者 offset 可能会超出 buffer 的末尾从而造成value被丢弃。 除非你对这个参数非常有把握，否则尽量不要使用。默认是 false。
		48	buf.writeDoubleBE(value, offset[, noAssert])
		根据传入的 offset 偏移量和指定的 endian 格式将 value 写入 buffer。注意：value 必须是一个有效的 64 位double 类型的值。 若参数 noAssert 为 true 将不会验证 value 和 offset 偏移量参数。 这意味着 value 可能过大，或者 offset 可能会超出 buffer 的末尾从而造成value被丢弃。 除非你对这个参数非常有把握，否则尽量不要使用。默认是 false。
		49	buf.fill(value[, offset][, end])
		使用指定的 value 来填充这个 buffer。如果没有指定 offset (默认是 0) 并且 end (默认是 buffer.length) ，将会填充整个buffer。


###5.Stream流
	Stream 是一个抽象接口，Node中有很多对象实现了这个接口。
	
	Node.js Stream有四种类型；
		Readable 可读类型
		Writable 可写类型
		Duplex   可读可写
		Transform 操作被写入数据，然后读出结果

	所有的Stream对象都是EventEmitter的实例，常用的事件有：
		data -当有数据可读时触发
		end  -没有更多的数据可读时触发
		error -在接收和写入过程中发生错误时触发
		finish -所有数据已被写入到底层系统时触发

	从流中读取数据：
		
	管道流：
		var fs = require("fs");

		// 创建一个可读流
		var readerStream = fs.createReadStream('input.txt');

		// 创建一个可写流
		var writerStream = fs.createWriteStream('output.txt');

		// 管道读写操作
		// 读取 input.txt 文件内容，并将内容写入到 output.txt 文件中
		readerStream.pipe(writerStream);

		console.log("程序执行完毕");

	链式流：
		var fs = require("fs");
		var zlib = require('zlib');

		// 压缩 input.txt 文件为 input.txt.gz
		fs.createReadStream('input.txt')
		  .pipe(zlib.createGzip())
		  .pipe(fs.createWriteStream('input.txt.gz'));
		  
		console.log("文件压缩完成。");

		
		var fs = require("fs");
		var zlib = require('zlib');

		// 解压 input.txt.gz 文件为 input.txt
		fs.createReadStream('input.txt.gz')
		  .pipe(zlib.createGunzip())
		  .pipe(fs.createWriteStream('input.txt'));
		  
		console.log("文件解压完成。");


###6.Node.js 模块系统：
	创建模块：
		//hello.js
		function Hello(){
			var name;
			this.setName=function(thyName){
				name=thyName;
			}
			this.sayHello=function(){
				console.log('hello'+name);
			};
		}
		module.exports=Hello;


	使用模块：
		//main.js
		var Hello=require('./hello');
		hello=new Hello();
		hello.setName('sadfasdfsd');
		hello.sayHello();


	加载模板：
		require方法接受以下几种参数的传递：
			http、fs、path等，原生模块
			./mod或/mod,相对路径的文件模板
			/path/mod,绝对路径的文件模板
			mod,非原生模板的文件模板
	
###7.路由

###8.Node.js全局对象：
	全局对象：global
	所有全局变量（除了global本身）都是global对象的属性
		
	注意：永远使用var 定义变量以避免引入全局变量

	
     全局变量：
	_filename：
		表示当前正在执行的脚本的文件名，它将输出文件所在路径的绝对位置
	
	_dirname:
		表示当前执行脚本所在的目录

	 process:     
		用于描述当前Node.js进程状态的对象，提供一个与操作系统的简单接口。

			事件：
				exit 当进程准备退出时触发
				beforeExit 当node清空事件循环，并且没有其他安排时触发这个事件
				uncaughtException 当一个异常冒泡回到事件循环，触发这个事件
				Signal 当进程接收到信号时就触发

			属性：
					stdout
						标准输出流。
					stderr
						标准错误流。
					stdin
						标准输入流。
					argv
						argv 属性返回一个数组，由命令行执行脚本时的各个参数组成。它的第一个成员总是node，第二个成员是脚本文件名，其余成员是脚本文件的参数。
					execPath
						返回执行当前脚本的 Node 二进制文件的绝对路径。
					execArgv
						返回一个数组，成员是命令行下执行脚本时，在Node可执行文件与脚本文件之间的命令行参数。
					env
						返回一个对象，成员为当前 shell 的环境变量
					exitCode
						进程退出时的代码，如果进程优通过 process.exit() 退出，不需要指定退出码。
					version
						Node 的版本，比如v0.10.18。
					versions
						一个属性，包含了 node 的版本和依赖.
					config
						一个包含用来编译当前 node 执行文件的 javascript 配置选项的对象。它与运行 ./configure 脚本生成的 "config.gypi" 文件相同。
					pid
						当前进程的进程号。
					title
						进程名，默认值为"node"，可以自定义该值。
					arch
						当前 CPU 的架构：'arm'、'ia32' 或者 'x64'。
					platform
						运行程序所在的平台系统 'darwin', 'freebsd', 'linux', 'sunos' 或 'win32'
					mainModule
						require.main 的备选方法。不同点，如果主模块在运行时改变，require.main可能会继续返回老的模块。可以认为，这两者引用了同一个模块。
			方法：
						abort()
							这将导致 node 触发 abort 事件。会让 node 退出并生成一个核心文件。
						chdir(directory)
							改变当前工作进程的目录，如果操作失败抛出异常。
						cwd()
							返回当前进程的工作目录
						exit([code])
							使用指定的 code 结束进程。如果忽略，将会使用 code 0。
						getgid()
							获取进程的群组标识（参见 getgid(2)）。获取到得时群组的数字 id，而不是名字。
							注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。
						setgid(id)
							设置进程的群组标识（参见 setgid(2)）。可以接收数字 ID 或者群组名。如果指定了群组名，会阻塞等待解析为数字 ID 。
							注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。
						getuid()
							获取进程的用户标识(参见 getuid(2))。这是数字的用户 id，不是用户名。
							注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。
						setuid(id)
							设置进程的用户标识（参见setuid(2)）。接收数字 ID或字符串名字。果指定了群组名，会阻塞等待解析为数字 ID 。
							注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。
						getgroups()
							返回进程的群组 iD 数组。POSIX 系统没有保证一定有，但是 node.js 保证有。
							注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。
						setgroups(groups)
							设置进程的群组 ID。这是授权操作，所有你需要有 root 权限，或者有 CAP_SETGID 能力。
							注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。
						initgroups(user, extra_group)
							读取 /etc/group ，并初始化群组访问列表，使用成员所在的所有群组。这是授权操作，所有你需要有 root 权限，或者有 CAP_SETGID 能力。
							注意：这个函数仅在 POSIX 平台上可用(例如，非Windows 和 Android)。
						kill(pid[, signal])
							发送信号给进程. pid 是进程id，并且 signal 是发送的信号的字符串描述。信号名是字符串，比如 'SIGINT' 或 'SIGHUP'。如果忽略，信号会是 'SIGTERM'。
						memoryUsage()
							返回一个对象，描述了 Node 进程所用的内存状况，单位为字节。
						nextTick(callback)
							一旦当前事件循环结束，调用回到函数。
						umask([mask])
							设置或读取进程文件的掩码。子进程从父进程继承掩码。如果mask 参数有效，返回旧的掩码。否则，返回当前掩码。
						uptime()
							返回 Node 已经运行的秒数。
						hrtime()
							返回当前进程的高分辨时间，形式为 [seconds, nanoseconds]数组。它是相对于过去的任意事件。该值与日期无关，因此不受时钟漂移的影响。主要用途是可以通过精确的时间间隔，来衡量程序的性能。
							你可以将之前的结果传递给当前的 process.hrtime() ，会返回两者间的时间差，用来基准和测量时间间隔。

			退出状态码：
					Uncaught Fatal Exception
						有未捕获异常，并且没有被域或 uncaughtException 处理函数处理。
					Unused
						保留
					Internal JavaScript Parse Error
						JavaScript的源码启动 Node 进程时引起解析错误。非常罕见，仅会在开发 Node 时才会有。
					Internal JavaScript Evaluation Failure
						JavaScript 的源码启动 Node 进程，评估时返回函数失败。非常罕见，仅会在开发 Node 时才会有。
					Fatal Error
						V8 里致命的不可恢复的错误。通常会打印到 stderr ，内容为： FATAL ERROR
					Non-function Internal Exception Handler
						未捕获异常，内部异常处理函数不知为何设置为on-function，并且不能被调用。
					Internal Exception Handler Run-Time Failure
						未捕获的异常， 并且异常处理函数处理时自己抛出了异常。例如，如果 process.on('uncaughtException') 或 domain.on('error') 抛出了异常。
					Unused
						保留
					Invalid Argument
						可能是给了未知的参数，或者给的参数没有值。
					Internal JavaScript Run-Time Failure
						JavaScript的源码启动 Node 进程时抛出错误，非常罕见，仅会在开发 Node 时才会有。
					Invalid Debug Argument 
						设置了参数--debug 和/或 --debug-brk，但是选择了错误端口。
					Signal Exits
						如果 Node 接收到致命信号，比如SIGKILL 或 SIGHUP，那么退出代码就是128 加信号代码。这是标准的 Unix 做法，退出信号代码放在高位。

     全局函数：
	setTimeout(cb,ms):
		全局函数在指定的毫秒（ms）输后执行一次指定函数（cb）

	clearTimeout(t):
		全局函数用于停止一个之前通过setTimeout()创建的定时器	

	setInterval(cb,ms):
		在指定的毫秒数ms后循环执行指定函数cb

	clearInterval(t):
		清除.....

	console方法：
		1.console.log([data][....])
			向标准输出流打印字符并以换行符结束。
		2.console.info([data][...])
			返回信息性消息
		3.console.error([data][...])
			输出错误信息
		4.console.warn([data][...])
			输出警告信息
		5.console.dir(obj[,options])
			用来对一个对象进行检查
		6.console.time(label)
			输出时间，表示计时的开始
		7.console.timeEnd(label)
			结束时间，表示计时结束
		8.console.trace(message[,...])
			当前执行的代码在堆栈中的调用路径
		9.console.assert(value[,message][,...])
			用于判断某个表达式或变量是否为true,第一个参数是表达式，
			第二个参数是字符串，只有当第一个参数为false,才会输出第二个参数。

	
		
###9.Node.js常用工具
	util.inherits
	util.isArray(object)
	util.isRegExp(object)
	util.isDate(object)
	util.isError(object)
###10.Node.js文件系统：
	fs模块中的方法有异步和同步版本

	打开文件：
		fs.open(path,flags[,mode],callback)

		path：文件路径
		flags；文件打开的行为
			可能的值：
				r	以读取模式打开文件。如果文件不存在抛出异常。
				r+	以读写模式打开文件。如果文件不存在抛出异常。
				rs	以同步的方式读取文件。
				rs+	以同步的方式读取和写入文件。
				w	以写入模式打开文件，如果文件不存在则创建。
				wx	类似 'w'，但是如果文件路径存在，则文件写入失败。
				w+	以读写模式打开文件，如果文件不存在则创建。
				wx+	类似 'w+'， 但是如果文件路径存在，则文件读写失败。
				a	以追加模式打开文件，如果文件不存在则创建。
				ax	类似 'a'， 但是如果文件路径存在，则文件追加失败。
				a+	以读取追加模式打开文件，如果文件不存在则创建。
				ax+	类似 'a+'， 但是如果文件路径存在，则文件读取追加失败。
		mode:设置文件模式（权限），文件创建默认权限为0666（可读可写）
		callback:回调函数，带有两个参数如：callback(err,fd)


	获取文件信息：
		fs.stat(path,callback)
			-path 文件路径
			-callback(err,stats) 回调函数


			stats类中的方法有：
				stats.isFile()	如果是文件返回 true，否则返回 false。
				stats.isDirectory()	如果是目录返回 true，否则返回 false。
				stats.isBlockDevice()	如果是块设备返回 true，否则返回 false。
				stats.isCharacterDevice()	如果是字符设备返回 true，否则返回 false。
				stats.isSymbolicLink()	如果是软链接返回 true，否则返回 false。
				stats.isFIFO()	如果是FIFO，返回true，否则返回 false。FIFO是UNIX中的一种特殊类型的命令管道。
				stats.isSocket()	如果是 Socket 返回 true，否则返回 false。

	写入文件：
		fs.writeFile(file,data[,options],callback)
			-file 文件名或文件描述符
			-data 要写入文件的数据，可以是String(字符串)或Buffer(流)对象
			-options 该参数是一个对象，包含{encoding,mode,flag}默认编码为utf8，模式为0666，flag为‘w’
			-callback 回调函数，只包含错误信息参数，在写入失败时返回
	
	读取文件：
		fs.read(fd, buffer, offset, length, position, callback)
	关闭文件：
		fs.close(fd, callback)
	截取文件：
		fs.ftruncate(fd, len, callback)
	删除文件：
		fs.unlink(path, callback)
	创建目录：
		fs.mkdir(path[, mode], callback)
	读取目录：
		fs.readdir(path, callback)
	删除目录：
		fs.rmdir(path, callback)



		writeFile 直接打开文件默认是 w 模式，所以如果文件存在，该方法写入的内容会覆盖旧的文件内容。


		文件模块方法参考手册
	以下为 Node.js 文件模块相同的方法列表：

		序号	方法 & 描述
		1	fs.rename(oldPath, newPath, callback)
		异步 rename().回调函数没有参数，但可能抛出异常。
		2	fs.ftruncate(fd, len, callback)
		异步 ftruncate().回调函数没有参数，但可能抛出异常。
		3	fs.ftruncateSync(fd, len)
		同步 ftruncate()
		4	fs.truncate(path, len, callback)
		异步 truncate().回调函数没有参数，但可能抛出异常。
		5	fs.truncateSync(path, len)
		同步 truncate()
		6	fs.chown(path, uid, gid, callback)
		异步 chown().回调函数没有参数，但可能抛出异常。
		7	fs.chownSync(path, uid, gid)
		同步 chown()
		8	fs.fchown(fd, uid, gid, callback)
		异步 fchown().回调函数没有参数，但可能抛出异常。
		9	fs.fchownSync(fd, uid, gid)
		同步 fchown()
		10	fs.lchown(path, uid, gid, callback)
		异步 lchown().回调函数没有参数，但可能抛出异常。
		11	fs.lchownSync(path, uid, gid)
		同步 lchown()
		12	fs.chmod(path, mode, callback)
		异步 chmod().回调函数没有参数，但可能抛出异常。
		13	fs.chmodSync(path, mode)
		同步 chmod().
		14	fs.fchmod(fd, mode, callback)
		异步 fchmod().回调函数没有参数，但可能抛出异常。
		15	fs.fchmodSync(fd, mode)
		同步 fchmod().
		16	fs.lchmod(path, mode, callback)
		异步 lchmod().回调函数没有参数，但可能抛出异常。Only available on Mac OS X.
		17	fs.lchmodSync(path, mode)
		同步 lchmod().
		18	fs.stat(path, callback)
		异步 stat(). 回调函数有两个参数 err, stats，stats 是 fs.Stats 对象。
		19	fs.lstat(path, callback)
		异步 lstat(). 回调函数有两个参数 err, stats，stats 是 fs.Stats 对象。
		20	fs.fstat(fd, callback)
		异步 fstat(). 回调函数有两个参数 err, stats，stats 是 fs.Stats 对象。
		21	fs.statSync(path)
		同步 stat(). 返回 fs.Stats 的实例。
		22	fs.lstatSync(path)
		同步 lstat(). 返回 fs.Stats 的实例。
		23	fs.fstatSync(fd)
		同步 fstat(). 返回 fs.Stats 的实例。
		24	fs.link(srcpath, dstpath, callback)
		异步 link().回调函数没有参数，但可能抛出异常。
		25	fs.linkSync(srcpath, dstpath)
		同步 link().
		26	fs.symlink(srcpath, dstpath[, type], callback)
		异步 symlink().回调函数没有参数，但可能抛出异常。 type 参数可以设置为 'dir', 'file', 或 'junction' (默认为 'file') 。
		27	fs.symlinkSync(srcpath, dstpath[, type])
		同步 symlink().
		28	fs.readlink(path, callback)
		异步 readlink(). 回调函数有两个参数 err, linkString。
		29	fs.realpath(path[, cache], callback)
		异步 realpath(). 回调函数有两个参数 err, resolvedPath。
		30	fs.realpathSync(path[, cache])
		同步 realpath()。返回绝对路径。
		31	fs.unlink(path, callback)
		异步 unlink().回调函数没有参数，但可能抛出异常。
		32	fs.unlinkSync(path)
		同步 unlink().
		33	fs.rmdir(path, callback)
		异步 rmdir().回调函数没有参数，但可能抛出异常。
		34	fs.rmdirSync(path)
		同步 rmdir().
		35	fs.mkdir(path[, mode], callback)
		S异步 mkdir(2).回调函数没有参数，但可能抛出异常。 mode defaults to 0777.
		36	fs.mkdirSync(path[, mode])
		同步 mkdir().
		37	fs.readdir(path, callback)
		异步 readdir(3). 读取目录的内容。
		38	fs.readdirSync(path)
		同步 readdir().返回文件数组列表。
		39	fs.close(fd, callback)
		异步 close().回调函数没有参数，但可能抛出异常。
		40	fs.closeSync(fd)
		同步 close().
		41	fs.open(path, flags[, mode], callback)
		异步打开文件。
		42	fs.openSync(path, flags[, mode])
		同步 version of fs.open().
		43	fs.utimes(path, atime, mtime, callback)
		 
		44	fs.utimesSync(path, atime, mtime)
		修改文件时间戳，文件通过指定的文件路径。
		45	fs.futimes(fd, atime, mtime, callback)
		 
		46	fs.futimesSync(fd, atime, mtime)
		修改文件时间戳，通过文件描述符指定。
		47	fs.fsync(fd, callback)
		异步 fsync.回调函数没有参数，但可能抛出异常。
		48	fs.fsyncSync(fd)
		同步 fsync.
		49	fs.write(fd, buffer, offset, length[, position], callback)
		将缓冲区内容写入到通过文件描述符指定的文件。
		50	fs.write(fd, data[, position[, encoding]], callback)
		通过文件描述符 fd 写入文件内容。
		51	fs.writeSync(fd, buffer, offset, length[, position])
		同步版的 fs.write()。
		52	fs.writeSync(fd, data[, position[, encoding]])
		同步版的 fs.write().
		53	fs.read(fd, buffer, offset, length, position, callback)
		通过文件描述符 fd 读取文件内容。
		54	fs.readSync(fd, buffer, offset, length, position)
		同步版的 fs.read.
		55	fs.readFile(filename[, options], callback)
		异步读取文件内容。
		56	fs.readFileSync(filename[, options])
		57	fs.writeFile(filename, data[, options], callback)
		异步写入文件内容。
		58	fs.writeFileSync(filename, data[, options])
		同步版的 fs.writeFile。
		59	fs.appendFile(filename, data[, options], callback)
		异步追加文件内容。
		60	fs.appendFileSync(filename, data[, options])
		The 同步 version of fs.appendFile.
		61	fs.watchFile(filename[, options], listener)
		查看文件的修改。
		62	fs.unwatchFile(filename[, listener])
		停止查看 filename 的修改。
		63	fs.watch(filename[, options][, listener])
		查看 filename 的修改，filename 可以是文件或目录。返回 fs.FSWatcher 对象。
		64	fs.exists(path, callback)
		检测给定的路径是否存在。
		65	fs.existsSync(path)
		同步版的 fs.exists.
		66	fs.access(path[, mode], callback)
		测试指定路径用户权限。
		67	fs.accessSync(path[, mode])
		同步版的 fs.access。
		68	fs.createReadStream(path[, options])
		返回ReadStream 对象。
		69	fs.createWriteStream(path[, options])
		返回 WriteStream 对象。
		70	fs.symlink(srcpath, dstpath[, type], callback)
		异步 symlink().回调函数没有参数，但可能抛出异常。


###11.GET/POST请求
	
###12.Node.js工具模块
	OS模块 ：一系列基本的系统操作函数
	Path模块 ：处理和转换文件路径的工具
	Net模块 ：用于底层的网络通信。提供了服务端和客户端的操作
	DNS模块 ： 用于解析域名
	Domain模块 ：简化异步代码的异常处理，可以捕捉处理try catch无法捕获的
	....

###13.使用Node创建Web服务器和Web客户端
	
###14.Node.js Express框架（Node.js Web应用框架）
	安装Express 
		npm install express --save 安装express并将其保存到依赖列表中

	安装模块：
		body-parser  node.js中间件，用于处理JSON、Raw、Text和URL编码的数据

		cookie-parser 这就是一个解析Cookie的工具，通过req.cookies可以去传过来的cookie,并把它们转成对象

		multer    node.js中间件，用于处理enctype="multipart/form-data"的表单数据


		
		npm install body-parser --save
		npm install cookie-parser --save
		npm install multer --save





	Request对象：
		req.app：当callback为外部文件时，用req.app访问express的实例
		req.baseUrl：获取路由当前安装的URL路径
		req.body / req.cookies：获得「请求主体」/ Cookies
		req.fresh / req.stale：判断请求是否还「新鲜」
		req.hostname / req.ip：获取主机名和IP地址
		req.originalUrl：获取原始请求URL
		req.params：获取路由的parameters
		req.path：获取请求路径
		req.protocol：获取协议类型
		req.query：获取URL的查询参数串
		req.route：获取当前匹配的路由
		req.subdomains：获取子域名
		req.accepts()：检查可接受的请求的文档类型
		req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages：返回指定字符集的第一个可接受字符编码
		req.get()：获取指定的HTTP请求头
		req.is()：判断请求头Content-Type的MIME类型

		
	
	Response对象：
		res.app：同req.app一样
		res.append()：追加指定HTTP头
		res.set()在res.append()后将重置之前设置的头
		res.cookie(name，value [，option])：设置Cookie
		opition: domain / expires / httpOnly / maxAge / path / secure / signed
		res.clearCookie()：清除Cookie
		res.download()：传送指定路径的文件
		res.get()：返回指定的HTTP头
		res.json()：传送JSON响应
		res.jsonp()：传送JSONP响应
		res.location()：只设置响应的Location HTTP头，不设置状态码或者close response
		res.redirect()：设置响应的Location HTTP头，并且设置状态码302
		res.render(view,[locals],callback)：渲染一个view，同时向callback传递渲染后的字符串，如果在渲染过程中有错误发生next(err)将会被自动调用。callback将会被传入一个可能发生的错误以及渲染后的页面，这样就不会自动输出了。
		res.send()：传送HTTP响应
		res.sendFile(path [，options] [，fn])：传送指定路径的文件 -会自动根据文件extension设定Content-Type
		res.set()：设置HTTP头，传入object可以一次设置多个头
		res.status()：设置HTTP状态码
		res.type()：设置Content-Type的MIME类型

	路由：
		路由决定了由谁去响应客户端请求

	静态文件：
		Express提供了内置的中间件express.static来设置静态文件：
			图片、CSS、JavaScript等

			app.use(express.static('public'))
	上传文件：
	Cookie:


###15.RESTful(Representational State Transfer) 表述性状态传递
一种设计风格

	HTTP方法：
		REST基本架构的四个方法：
			GET 用于获取数据
			PUT 用于更新或添加数据
			DELETE 用于删除数据
			POST 用于添加数据


###16.Node.js多进程
	每个子进程带有三个流对象：
		child stdin
		child stdout
		child stderr

	
	使用child_press模块创建子进程，方法有：
		exec -child_process.exec 使用子进程执行命令，缓存子进程的输出，
					并将子进程的输出以回调函数参数的形式返回
		spawn -child_process.spawn 使用指定的命令行参数创建新进程
		fork -child_process.fork 是spawn()的特殊形式，用于在子进程中运行的模块
		
					



	exec()方法：
		child_process.exec(command[,optinons],callback);
			-command： 字符串，将要执行的命令
			-options:对象，可以是：
				cwd,字符串，子进程的当前工作目录
				env,对象 环境变量键值对
				encoding,字符串，字符编码（默认'utf8'）
				shell,字符串，将要执行命令的Shell
				timeout,数字，超时时间（默认0）
				maxBuffer,数字，在stdout或stderr中允许
						存在的最大缓存，如果超出那么
						子进程将会被杀死（默认200*1024）
				killSignal，字符串，结束信号
				uid，数字，设置用户进程的ID
				gid，数字，设置进程组的ID
			-callback：回调函数，包含三个参数（error,stdout,stderr）
			
	
	spawn()方法：
		child_process.spawn(command[,args][,options])
			-command：将要运行的命令
			-args:Array字符串参数数组
			-options 对象，可以是
				cwd String 子进程的当前工作目录
				env Object 环境变量键值对
				stdio Array|String 子进程的stdio配置
				detached Boolean 这个子进程将会变成进程组的领导
				uid Number 设置用户进程的id
				gid Number 设置进程组的id

	fork 方法
		child_process.fork 是 spawn() 方法的特殊形式，用于创建进程，语法格式如下：

		child_process.fork(modulePath[, args][, options])

		参数:

			modulePath： String，将要在子进程中运行的模块

			args： Array 字符串参数数组

			options：Object

			cwd String 子进程的当前工作目录
			env Object 环境变量键值对
			execPath String 创建子进程的可执行文件
			execArgv Array 子进程的可执行文件的字符串参数数组（默认： process.execArgv）
			silent Boolean 如果为true，子进程的stdin，stdout和stderr将会被关联至父进程，
					否则，它们将会从父进程中继承。（默认为：false）
			uid Number 设置用户进程的 ID
			gid Number 设置进程组的 ID


###17.Node.js JXcore打包
	1.下载JXcore


###18.Node.js 连接MySQL
	1.安装驱动
		npm install mysql

