1.全文搜索（Full-text Search）：
		全文检索是指计算机索引程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置，当用户查询时，检索程序就根据事先建立的索引进行查找，并将查找的结果反馈给用户的检索方式。
		
	
2.倒排索引（Inverted Index）：
	   该索引表中的每一项都包括一个属性值和具有该属性值的各记录的地址。由于不是由记录来确定属性值，而是由属性值来确定记录的位置，因而称为倒排索引(inverted index)。Elasticsearch能够实现快速、高效的搜索功能，正是基于倒排索引原理。

3.节点、集群（Node & Cluster）
	   Elasticsearch 本质上是一个分布式数据库，允许多台服务器协同工作，每台服务器可以运行多个Elasticsearch实例。单个Elasticsearch实例称为一个节点（Node），一组节点构成一个集群（Cluster）。


4.索引（Index）（相当于数据库）：
	   Elasticsearch 数据管理的顶层单位就叫做 Index（索引），相当于关系型数据库里的数据库的概念。另外，每个Index的名字必须是小写。
	   
5.文档（Document）：
	  Index里面单条的记录称为 Document（文档）。许多条 Document 构成了一个 Index。Document 使用 JSON 格式表示。同一个 Index 里面的 Document，不要求有相同的结构（scheme），但是最好保持相同，这样有利于提高搜索效率

6.类(Type)（相当于数据表）：
	Document 可以分组，比如employee这个 Index 里面，可以按部门分组，也可以按职级分组。这种分组就叫做 Type，它是虚拟的逻辑分组，用来过滤 Document，类似关系型数据库中的数据表。
    不同的 Type 应该有相似的结构（Schema），性质完全不同的数据（比如 products 和 logs）应该存成两个 Index，而不是一个 Index 里面的两个 Type（虽然可以做到）。
	
	
7.文档元数据(Document metadata)：
	文档元数据为_index, _type, _id, 这三者可以唯一表示一个文档，_index表示文档在哪存放，_type表示文档的对象类别，_id为文档的唯一标识。


8.字段(Fields)
	每个Document都类似一个JSON结构，它包含了许多字段，每个字段都有其对应的值，多个字段组成了一个 Document，可以类比关系型数据库数据表中的字段
	
	
==关系型数据库与es类比==:
DB->Database->Tables->Rows      ->Columns
ES->Index   ->Types ->Documents ->Fields


9.Es交互方式
	Java Api和restful api
	
	
	
	
	
1)新增文档：
	put http://192.168.3.20:9200/megacorp/employee/1
	
    megacorp 索引名称
	employee 类型名称
	1         id
	
	
2.索引文档：
	get http://192.168.3.20:9200/megacorp/employee/1
	
3.删除文档
	delete http://192.168.3.20:9200/megacorp/employee/1

4.检测文档是否存在(存在200，不存在404)
	head  http://192.168.3.20:9200/megacorp/employee/1 
	
5.轻量搜索
	##搜索所有雇员：
	get  http://192.168.3.20:9200/megacorp/employee/_search
	
	##搜索姓氏为Smith的雇员：
	get http://192.168.3.20:9200/megacorp/employee/_search?q=last_name:Smith
	
	##使用表达式查询(body参数)：
	get http://192.168.3.20:9200/megacorp/employee/_search
		{
			"query" : {
				"match" : {
					"last_name" : "Smith"
				}
			}
		}
	##复杂查询
	get http://192.168.3.20:9200/megacorp/employee/_search
		{
			"query" : {
				"bool": {
					"must": {
						"match" : {
							"last_name" : "smith" 
						}
					},
					"filter": {
						"range" : {
							"age" : { "gt" : 30 } 
						}
					}
				}
			}
		}
		
		
	##全文搜索（搜索结果按照相关性得分排序，完全匹配排在最前面，部分匹配在后面）
	get http://192.168.3.20:9200/megacorp/employee/_search
		{
			"query" : {
				"match" : {
					"about" : "rock climbing"
				}
			}
		}
		
	##短语搜索（短语完全匹配搜索）
	get http://192.168.3.20:9200/megacorp/employee/_search
		{
			"query" : {
				"match_phrase" : {
					"about" : "rock climbing"
				}
			}
		}
		
	##高亮搜索
	get http://192.168.3.20:9200/megacorp/employee/_search
		{
			"query" : {
				"match_phrase" : {
					"about" : "rock climbing"
				}
			},
			"highlight": {
				"fields" : {
					"about" : {}
				}
			}
		}
		
	##聚合查询（类似于group by）
	get http://192.168.3.20:9200/megacorp/employee/_search
		{
		  "aggs": {
			"all_interests": {
			  "terms": { "field": "interests" }
			}
		  }
		}
		
		
		{
		  "query": {
			"match": {
			  "last_name": "smith"
			}
		  },
		  "aggs": {
			"all_interests": {
			  "terms": {
				"field": "interests"
			  }
			}
		  }
		}
		
		{
			"aggs" : {
				"all_interests" : {
					"terms" : { "field" : "interests" },
					"aggs" : {
						"avg_age" : {
							"avg" : { "field" : "age" }
						}
					}
				}
			}
		}
	