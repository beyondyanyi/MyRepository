1.Shiro三大概念：
	Subject、SecurityManager、Realms
	
	Subject:主角，当前参与应用安全部分的主角。可以是任何东西。所有Subject都需要SecurityManager
	SecurityManager:安全管理员，核心架构。当我们与Subject进行交互的时候，实际上是SecurityManager在背后帮你举起
					Subject来做一些安全操作
	Realms:连接桥，

2.RBAC和RBAC新解
	Resource base access control  基于资源的权限控制
	Role base access control      基于角色的权限控制


3.Shiro授权
 Shiro三种授权方式
	1.编程式
	2.注解式
	3.jsp/gsp标签式

	(1).基于角色的访问控制（隐式角色）
		1.在ini配置文件配置用户拥有的角色(shiro-role.ini)
			[user]
			zhang=123,role1,role2


			规则："用户名=密码，角色1，角色2"

		2.判断某个用户是否有某个角色/某些权限  
		     subject.hasRole()
		     subject.hasRoles()
		     subject.hasAllRoles()

		     下面没有会抛出异常
		     subject.checkRole()
		     subject.checkRoles()
		     subject.checkAllRoles()

	(2).基于资源的访问控制（显示角色）
		1.在ini配置文件配置用户拥有的角色及角色-权限关系(shiro-permission.ini)
		[user]
		zhang=123,role1,role2
		admin=123,role1
		[roles]
		role1=user:create,user:update
		role2=user:create,user:delete


		规则："角色=权限1,权限2"


		2.判断某个用户是否有某个权限/所有权限
		subject.isPermitted()
		subject.isPermittedAll()

		下面没有会抛异常
		subject.checkPermission()
		subject.checkPermissions()



	(3.)Permission
		字符串通配符权限
			规则："资源标识符：操作：对象实例ID"

		1.单个资源单个权限
		   subject.checkPermissions("system:user:update");
		2.单个资源多个权限
			   role4=system:user:update,system:user:delete
			   可简写为
			   role4=system:user:update,delete
				
			   通过代码判断：
			   subject.checkPermissions("system:user:update,delete");
			  
		3.单个资源全部权限
		    role5=system:user:create,update,delete,view
	            判断
		    subject.checkPermissions("system:user:create,delte,view,update");

		    role5=system:user:*
		    或简写为
		    role5=system:user
		    判断
		    subject.checkPermissions("system:user:*");
		    subject.checkPermissions("system:user");

		 4.所有资源所有权限
		   role6=*:view
		   判断
		   subject.checkPermissions("user:view");

		 5.实例级别的权限
			（1）单个实例单个权限
			     role7=user:view:1
			     对资源user的1实例拥有view权限
			  
			     判断
			     subject.checkPermissions("user:view:1");
			 (2)单个实例多个权限
			     role7=user:update,delete:1
			     对资源user的1实例拥有update、delete权限

			     判断
			     subject.checkPermissions("user:delete,update:1");
			    
			  (3)所有实例单个权限
			     role7=user:auth:*
			     对资源user的实例1拥有所有权限

			     判断
			     subject.checkPermisssions("user:auth:1","user:auth:2");

			  (4)所有实例所有权限
			     role7=user:*:*
			     对资源user的1实例拥有所有权限

			     判断
			     subject.checkPermissions("user:view:1","user:auth:2");


		6.Shiro对权限字符串缺失部分的处理
			后缀匹配需指定前缀
		7.WildcardPermission
			subject.checkPermission("menu:view:1");
			subject.checkPermission(new WildcardPermission("menu:view:1"));

		8.授权流程：
			（1）调用subject.isPermitted*/hasRole*接口，其委托给SecurityManager，而SecurityManager委托给Authorizer
			 (2) Authorizer是真正的授权者
			 (3) 在进行授权之前，其会调用相应的Realm获取Subject相应的角色/权限用于匹配传入的角色/权限
			 (4) Authorizer会判断Realm的角色/权限是否和传入的匹配，如果有多个Realm,会委托给ModularRealmAuthorizer进行循环判断，如果匹配isPermitted*/hasRole,会返回true,否则返回false表示授权失败



			可通过如下ini的配置更改Authorizer实现：
			  authorizer=org.apache.shiro.authz.ModularRealmAuthorizer
			  securityManager.authorizer=$authorizer


4.Shiro Ini配置
	1.根对象SecurityManager
		1.纯Java代码写法
			DefaultSecurityManager securityManager = new DefaultSecurityManager();
			//设置authenticator
			ModularRealmAuthenticator authenticator = new ModularRealmAuthenticator();
			authenticator.setAuthenticationStrategy(new AtLeastOneSuccessfulStrategy());
			securityManager.setAuthenticator(authenticator);
			//设置authorizer
			ModularRealmAuthorizer authorizer = new ModularRealmAuthorizer();
			authorizer.setPermissionResolver(new WildcardPermissionResolver());
			securityManager.setAuthorizer(authorizer);
			//设置Realm
			DruidDataSource ds = new DruidDataSource();
			ds.setDriverClassName("com.mysql.jdbc.Driver");
			ds.setUrl("jdbc:mysql://localhost:3306/shiro");
			ds.setUsername("root");
			ds.setPassword("");
			JdbcRealm jdbcRealm = new JdbcRealm();
			jdbcRealm.setDataSource(ds);
			jdbcRealm.setPermissionsLookupEnabled(true);
			securityManager.setRealms(Arrays.asList((Realm) jdbcRealm));
			//将SecurityManager设置到SecurityUtils 方便全局使用
			SecurityUtils.setSecurityManager(securityManager);
			Subject subject = SecurityUtils.getSubject();
			UsernamePasswordToken token = new UsernamePasswordToken("zhang", "123");
			subject.login(token);
			Assert.assertTrue(subject.isAuthenticated());

		2.等价的INI配置（shiro-config.ini）
			[main]
			\#authenticator
			authenticator=org.apache.shiro.authc.pam.ModularRealmAuthenticator
			authenticationStrategy=org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy
			authenticator.authenticationStrategy=$authenticationStrategy
			securityManager.authenticator=$authenticator
			\#authorizer
			authorizer=org.apache.shiro.authz.ModularRealmAuthorizer
			permissionResolver=org.apache.shiro.authz.permission.WildcardPermissionResolver
			authorizer.permissionResolver=$permissionResolver
			securityManager.authorizer=$authorizer
			\#realm
			dataSource=com.alibaba.druid.pool.DruidDataSource
			dataSource.driverClassName=com.mysql.jdbc.Driver
			dataSource.url=jdbc:mysql://localhost:3306/shiro
			dataSource.username=root
			dataSource.password=123456
			jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm
			jdbcRealm.dataSource=$dataSource
			jdbcRealm.permissionsLookupEnabled=true
			securityManager.realms=$jdbcRealm


			从shiro-config.ini获取相应的securityManager实例：
				Factory<org.apache.shiro.mgt.SecurityManager> factory =new IniSecurityManagerFactory("classpath:shiro-config.ini");
				org.apache.shiro.mgt.SecurityManager securityManager = factory.getInstance();
				//将SecurityManager设置到SecurityUtils 方便全局使用
				SecurityUtils.setSecurityManager(securityManager);
				Subject subject = SecurityUtils.getSubject();
				UsernamePasswordToken token = new UsernamePasswordToken("zhang", "123");
				subject.login(token);
				Assert.assertTrue(subject.isAuthenticated());



	2.ini配置
		
		[main]部分
		  提供了对根对象securityManager及其依赖对象的配置

			创建对象
				securityManager=org.apache.shiro.mgt.DefaultSecurityManager
			常量值setter注入
				dataSource.driverClassName=com.mysql.jdbc.Driver
			对象引用setter注入
				authenticator=org.apache.shiro.authc.pam.ModularRealmAuthenticator
				authenticationStrategy=org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy
				authenticator.authenticationStrategy=$authenticationStrategy
				securityManager.authenticator=$authenticator
			嵌套属性setter注入
				securityManager.authenticator.authenticationStrategy=$authenticationStrategy
			byte数组setter注入
				\#base64 byte[]
				authenticator.bytes=aGVsbG8=
				\#hex byte[]
				authenticator.bytes=0x68656c6c6f
			Array/Set/List setter注入
				authenticator.array=1,2,3
				authenticator.set=$jdbcRealm,$jdbcRealm
			Map setter注入
				authenticator.map=$jdbcRealm:$jdbcRealm,1:1,key:abc
			实例化/注入顺序
				realm=Realm1
				realm=Realm12
				authenticator.bytes=aGVsbG8=
				authenticator.bytes=0x68656c6c6f&nbsp; 
				后面的覆盖前面的

		[users]部分
			
		[roles]部分

		[urls]部分
			配置url及相应的拦截器之间的关系，格式："url=拦截器[参数],拦截器[参数]"

			[urls]
			/admin/** = authc, roles[admin], perms["permission1"]


5.Shiro编码加密
	编码/加密
		在涉及到密码存储问题上,应该加密/生成密码摘要存储，生成不可逆的摘要方式存储
	编码/解密
		Shiro提供了base64和16进制字符串编码/解码的api支持，方便一些编码解码操作。Shiro内部的一些数据的存储/表示都使用了base64和16进制字符串
		
		base64编码、解码
		String str = "hello";
		String base64Encoded = Base64.encodeToString(str.getBytes());
		String str2 = Base64.decodeToString(base64Encoded);
		Assert.assertEquals(str, str2);


		16进制编码、解码
		tring str = "hello";
		String base64Encoded = Hex.encodeToString(str.getBytes());
		String str2 = new String(Hex.decode(base64Encoded.getBytes()));
		Assert.assertEquals(str, str2);


	散列算法：
		散列算法一般用于生成数据的摘要信息，是一种不可逆的算法，一般适合存储密码之类的数据，常见的散列算法
		如MD5、SHA等

		String str = "hello";
		String salt = "123";
		String md5 = new Md5Hash(str, salt).toString();

		String str = "hello";
		String salt = "123";
		String sha1 = new Sha256Hash(str, salt).toString();

		String str = "hello";
		String salt = "123";
		//内部使用MessageDigest
		String simpleHash = new SimpleHash("SHA-1", str, salt).toString()


	加密/解密
		shiro提供对称式加密/解密算法的支持（AES、Blowfish等）

		AES算法实现：	
			AesCipherService aesCipherService = new AesCipherService();
			aesCipherService.setKeySize(128); //设置key长度
			//生成key
			Key key = aesCipherService.generateNewKey();
			String text = "hello";
			//加密
			String encrptText = 
			aesCipherService.encrypt(text.getBytes(), key.getEncoded()).toHex();
			//解密
			String text2 =
			 new String(aesCipherService.decrypt(Hex.decode(encrptText), key.getEncoded()).getBytes());
			Assert.assertEquals(text, text2);
	
	PasswordService/CredentialsMatcher
		Shiro 提供了 PasswordService 及 CredentialsMatcher 用于提供加密密码及验证密码服务。

	DefaultPasswordService 配合 PasswordMatcher 实现简单的密码加密与验证服务

	HashedCredentialsMatcher 实现密码验证服务

6.Shiro Realm
	Realm


7.Shiro Web集成
	与web集成：
		Shiro 提供了与 Web 集成的支持，其通过一个 ShiroFilter 入口来拦截需要安全控制的 URL，然后进行相应的控制，ShiroFilter 类似于如 Strut2/SpringMVC 这种 web 框架的前端控制器，其是安全控制的入口点，其负责读取配置（如 ini 配置文件），然后判断 URL 是否需要登录 / 权限等工作。


	准备环境：
		1.创建webapp应用
		2.依赖
			<dependency>
			    <groupId>javax.servlet</groupId>
			    <artifactId>javax.servlet-api</artifactId>
			    <version>3.0.1</version>
			    <scope>provided</scope>
			</dependency>
			<dependency>
			    <groupId>org.apache.shiro</groupId>
			    <artifactId>shiro-web</artifactId>
			    <version>1.2.2</version>
			</dependency>
		3.ShiroFilter入口
			shiro1.2及以后版本的配置方式：
				<listener>
				   <listener-class>org.apache.shiro.web.env.EnvironmentLoaderListener</listener-class>
				</listener>

				<context-param>
				   <param-name>shiroEnvironmentClass</param-name>
				   <param-value>org.apache.shiro.web.env.IniWebEnvironment</param-value>
				</context-param>
				<context-param>
				   <param-name>shiroConfigLocations</param-name>
				   <param-value>classpath:shiro.ini</param-value>
			        </context-param>


			shiroConfigLocations 默认是 “/WEB-INF/shiro.ini”，IniWebEnvironment 默认是先从 / WEB-INF/shiro.ini 加载，如果没有就默认加载 classpath:shiro.ini。


		4.与Spring集成
			<filter>
			    <filter-name>shiroFilter</filter-name>
			    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
			    <init-param>
				<param-name>targetFilterLifecycle</param-name>
				<param-value>true</param-value>
			    </init-param>
			</filter>
			<filter-mapping>
			    <filter-name>shiroFilter</filter-name>
			    <url-pattern>/*</url-pattern>
			</filter-mapping>




			<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
				<property name="securityManager" ref="securityManager"/>
			<!—忽略其他，详见与Spring集成部分 -->
			</bean>


		5.web ini配置
			
			[urls]
			/login=anon        anon拦截器表示匿名访问
			/unauthorized=anon 
			/static/**-anon    
			/authenticated=authc  authc拦截器表示需要身份认证通过后才能访问
			/role=authc,roles[admin]  roles[admin]拦截器表示需要有admin角色授权才能访问
			/permission=authc,perms["user:create"]   perms["user:create"]拦截器表示需要有"user:create"权限才能访问

			格式："url=拦截器[参数],拦截器[参数]"



			url模式使用Ant风格模式：
				通配符     
				?         匹配任何单字符    如：/admin?   能匹配/admin1  但不匹配/admin或/ admin1
				*	  匹配0或者任意数量的字符
				**	  匹配0或者更多的目录  如：/admin/**将匹配/admin/a或/admin/a/b
			
			url模式匹配顺序：
				url模式匹配是按照在配置中的声明顺序匹配，即从头开始使用第一个匹配的url模式对应的拦截器链
		6.基于Basic的拦截器身份验证：
			
		7.基于表单的拦截器身份验证：
			shiro-formfilterlogin.ini
		
			[main]
			authc.loginUrl=/formfilterlogin
			authc.usernameParam=username
			authc.passwordParam=password
			authc.successUrl=/
			authc.failureKeyAttribute=shiroLoginFailure
			[urls]
			/role=authc,roles[admin]




8.Shiro拦截器机制
	Shiro使用了与Servlet一样的Filter接口进行扩展；

	1.NameableFilter
		NameableFilter给Filter起个名字，如果没有设置默认就是FilterName
	2.OncePerRequestFilter
		OncePerRequestFilter用于防止多次执行Filter的;也就是说一次请求只会走一次拦截器链
	3.ShiroFilter
		ShiroFilter是整个Shiro的入口点，用于拦截需要安全控制的请求进行处理
	4.AdviceFilter
		AdviceFilter提供了AOP风格的支持
			preHandler 类似AOP中的前置增强
			postHandle 类似AOP中的后置返回增强
			afterCompletion 类似AOP中的后置最终增强
	5.PathMatchingFilter
		PathMatchingFilter提供了基于Ant风格的请求路径匹配功能及拦截器参数解析的功能


	6.AccessControlFilter
		AccessControlFilter提供了访问控制的基本功能；

			isAccessAllowed:表示是否允许访问；
			onAccessDenied:表示当访问拒绝时是否已经处理了；（如果返回true表示需要继续处理；如果返回false表示该拦截器实例已经处理了，将直接返回即可）
			onPreHandle:会自动调用这两个方法决定是否继续处理




9.Shiro JSP标签
	Shiro提供了JSTL标签用于再Jsp/Gsp页面进行权限控制，如根据登陆用户显示相应的页面按钮

     导入标签库：
	<%taglib prefix="shiro" uri="http:shiro.apache.org/tags" %>

	标签库定义在 shiro-web.jar 包下的 META-INF/shiro.tld 中定义。


	1.guest标签
		<shiro:guest>
			欢迎游客访问，<a href="${pageContext.request.contextPath}/login.jsp">登录</a>
		</shiro:guest>

		用户没有身份验证时显示相应信息，即游客访问信息。

	2.user标签
		<shiro:guest>
			欢迎游客访问，<a href="${pageContext.request.contextPath}/login.jsp">登录</a>
		</shiro:guest>

		用户已经身份验证 / 记住我登录后显示相应的信息。

	3.authenticated标签
		<shiro:authenticated>
			用户[<shiro:principal>]已身份验证通过
		</shiro:authenticated>

		用户已经身份验证通过，即 Subject.login 登录成功，不是记住我登录的。

	4.notAuthenticated标签
		<shiro:notAuthenticated>
			未身份验证（包括记住我）
		</shiro:notAuthenticated>


		用户已经身份验证通过，即没有调用 Subject.login 进行登录，包括记住我自动登录的也属于未进行身份验证。


	5.principal标签
		<shiro:principal/>
		显示用户身份信息，默认调用 Subject.getPrincipal() 获取，即 Primary Principal。
		<shiro:principal type="java.lang.String"/>
		相当于 Subject.getPrincipals().oneByType(String.class)。
		<shiro:principal property="username"/>
		相当于 ((User)Subject.getPrincipals()).getUsername()。

	6.hasRole标签
		<shiro:hasRole name="admin">
			用户[<shiro:principal/>]拥有角色admin
		</shiro:hasRole>

		如果当前 Subject 有角色将显示 body 体内容。

	7.hasAnyRoles标签
		<shiro:hasAnyRoles name="admin,user">
		    用户[<shiro:principal/>]拥有角色admin或user<br/>
		</shiro:hasAnyRoles>&nbsp;

		如果当前 Subject 有任意一个角色（或的关系）将显示 body 体内容。
	
	8.lacksRole标签
		<shiro:lacksRole name="abc">
		    用户[<shiro:principal/>]没有角色abc<br/>
		</shiro:lacksRole>

		如果当前 Subject 没有角色将显示 body 体内容。

	9.hasPermission标签
		<shiro:hasPermission name="user:create">
		    用户[<shiro:principal/>]拥有权限user:create<br/>
		</shiro:hasPermission>


		如果当前 Subject 有权限将显示 body 体内容。

	10.lacksPermission标签
		<shiro:lacksPermission name="org:create">
		    用户[<shiro:principal/>]没有权限org:create<br/>
		</shiro:lacksPermission>

		如果当前 Subject 没有权限将显示 body 体内容。


     导入自定义标签库：
	<%taglib prefix="zhang" tagdir="/WEB-INF/tags" %>
		
		<zhang:hasAllRoles name="admin,user">
		    用户[<shiro:principal/>]拥有角色admin和user<br/>
		</zhang:hasAllRoles>


10.Shiro会话管理
	会话：
		获取会话
		subject.getSession();
		subject.getSession(true);
		subject.getSession(false);		
	
		获取当前会话的唯一标识：
		session.getId();

		获取当前Subject的主机地址
		session.getTimeout();

		获取/设置当前Session的过期时间；如果不设置默认是会话管理器的全局过期时间
		session.getTimeout();
		session.setTimeout(毫秒);

		获取会话的启动时间及最后访问时间（如果是 JavaSE 应用需要自己定期调用 session.touch() 去更新最后访问时间；如果是 Web 应用，每次进入 ShiroFilter 都会自动调用 session.touch() 来更新最后访问时间。）
		session.getStartTimestamp();
		session.getLastAccessTime();

		更新会话最后访问时间及销毁会话；当 Subject.logout() 时会自动调用 stop 方法来销毁会话。如果在 web 中，调用 javax.servlet.http.HttpSession. invalidate() 也会自动调用 Shiro Session.stop 方法进行销毁 Shiro 的会话。


	会话管理器：
		


11.Shiro单点登录
	
	Jasig CAS单点登录分为服务器端和客户端，服务器端提供单点登录，多个客户端（子系统）将跳转到改服务器进行登录验证，大致流程如何：
		1.访问客户端需要登录的页面 http://loalhost:9080/client/ ,此时会跳到登录服务器https://localhost:8443/server/login?service=https://localhost:9443/client/cas;
		2.如果此时单点登录服务器也没有登录的话，会显示登录表单页面，输入用户名/密码进行登录;
		3. 登录成功后服务器端会回调客户端传入的地址:
			https://localhost:9443/client/cas?ticket=ST-1-eh2cIo92F9syvoMs5DOg-cas01.example.org ,且带着一个 ticket；
		4.